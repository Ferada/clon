\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2010 Didier Verna

@c Author:        Didier Verna <didier@lrde.epita.fr>
@c Maintainer:    Didier Verna <didier@lrde.epita.fr>
@c Created:       Fri Jul  2 02:24:49 2010
@c Last Revision: Fri Jul  2 02:24:55 2010

@c This file is part of Clon.

@c Clon is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License version 3,
@c as published by the Free Software Foundation.

@c Clon is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


@c Commentary:

@c Contents management by FCM version 0.1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-user.info
@settitle The Clon User Manual
@afourpaper
@c %**end of header


@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0
@set COPYRIGHT_DATE 2010
@setchapternewpage odd
@setcontentsaftertitlepage
@documentdescription
This is the Clon User Manual for Clon version @value{VERSION}: it
explains how to use Clon in your application.
@end documentdescription


@c ====================================================================
@c New Commands
@c ====================================================================
@macro clon
@t{Clon}
@end macro

@macro cl
Common Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------
@c The following 3 macros are here to circumvent the info filenames
@c changes, when referencing the end-user manual:

@macro pxenduserref{node}
@ifinfo
@pxref{\node\, , , clon-enduser, The Clon End-User Manual}
@end ifinfo
@ifnotinfo
@pxref{\node\, , , enduser, The Clon End-User Manual}
@end ifnotinfo
@end macro

@macro xenduserref{node}
@ifinfo
@xref{\node\, , , clon-enduser, The Clon End-User Manual}
@end ifinfo
@ifnotinfo
@xref{\node\, , , enduser, The Clon End-User Manual}
@end ifnotinfo
@end macro

@macro enduserref{node}
@ifinfo
@ref{\node\, , , clon-enduser, The Clon End-User Manual}
@end ifinfo
@ifnotinfo
@ref{\node\, , , enduser, The Clon End-User Manual}
@end ifnotinfo
@end macro


@c ---------------
@c Indexing macros
@c ---------------

@macro copindex{prop}
@cindex Options, common properties, \prop\
@cindex Options, properties, common, \prop\
@end macro

@macro cvopindex{prop}
@cindex Valued Options, common properties, \prop\
@cindex Valued Options, properties, common, \prop\
@cindex Options, valued, common properties, \prop\
@cindex Options, valued, properties, common, \prop\
@end macro

@macro voindex{opt}
@cindex Valued Options, @t{\opt\}
@cindex Options, valued, @t{\opt\}
@end macro

@macro vopindex{opt, prop}
@cindex Valued Options, @t{\opt\}, properties, \prop\
@cindex Options, valued, @t{\opt\}, properties, \prop\
@end macro

@macro bioindex{opt}
@cindex @t{--clon-\opt\}
@cindex Built-In Options, @t{--clon-\opt\}
@cindex Options, built-in, @t{--clon-\opt\}
@end macro

@macro clsindex{cls}
@tpindex \cls\
@tpindex @r{Classes, }\cls\
@end macro

@macro clssindex{cls, slot}
@tpindex \cls\@r{, slots, }\slot\
@tpindex @r{Classes, }\cls\@r{, slots, }\slot\
@end macro

@macro ocindex{cls}
@clsindex{\cls\}
@tpindex @r{Option Classes, }\cls\
@end macro

@macro ecindex{cond}
@tpindex \cond\
@tpindex @r{Error Conditions, }\cond\
@end macro

@macro ecsindex{cond, slot}
@tpindex \cond\@r{, slots, }\slot\
@tpindex @r{Error Conditions, }\cond\@r{, slots, }\slot\
@end macro

@macro fiaindex{func, arg}
@findex \func\@r{, initargs, }\arg\
@end macro

@macro fkindex{func, key}
@findex \func\@r{, keys, }\key\
@end macro

@macro foindex{func, opt}
@findex \func\@r{, options, }\opt\
@end macro

@macro fiindex{func, item}
@findex \func\@r{, items, }\item\
@end macro

@macro fmindex{func, method}
@findex \func\@r{, methods, }\method\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon User: (clon-user). The Clon User Manual.
@end direntry


@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon User Manual
@subtitle The @CmdLine{} Option Nuker, Version @value{VERSION}
@vskip 2cm
@image{clon,16cm}
@author Didier Verna <@email{didier@@lrde.epita.fr}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon User Manual

This is the @clon{} User Manual for @clon{} version @value{VERSION}:
it explains how to use @clon{} in your application.

@menu
* Copying::             The GNU General Public License
* Introduction::        What Clon is all about
* Quick Start::         For the brave and the impatient
* Using Clon::          Clonificating your application
* Extending Clon::      Creating your own option types
* Advanced Usage::      Things rarely needed
* Conclusion::          That's all folks
* Quick Start Program:: The complete listing
* API Quick Reference:: The Complete protocols
* Indexes::             Concept, Function and Variable
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
@clon{} is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 3,
as published by the Software Foundation.

@clon{} is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Quick Start, Copying, Top
@chapter Introduction

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables, fallback or default values. @clon{} comes with a
set of extensible option types (switches, paths, strings @etc{}).
@clon{} also provides automatic generation and formatting of help
strings, with support for highlighting on @tty{}'s through ISO/IEC 6429
SGR. This formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Option Nuker'' or ``The @cl{} Option Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This manual is for the @clon{} @emph{user}, that is, the developer of a
@cl{} application who wants to use @clon{} for @cmdline{} option
management@footnote{An application using @clon{} for its @cmdline{}
option management is said to be @emph{clonified}. It is also possible to
say @emph{clonfiscated}. However, we advise against using
@emph{clonistified}. The term @emph{clonificated} is also considered bad
style, and the use of @emph{clonificationated} is strictly prohibited.}.
As opposed to the user of the @emph{library}, the user of an
@emph{application} powered by @clon{} is called an @emph{end-user}.
@clon{} provides both a user manual (this one) and an end-user manual
(@pxenduserref{Top}). Everybody should read the end-user manual first.

@ref{Quick Start} provides a very short example in order to give an
overview of what's coming next. @ref{Using Clon} explains in detail how
to clonify your application, and @ref{Extending Clon} describe how to
extend @clon{} with your own option types.



@c ====================================================================
@c Quick Start
@c ====================================================================
@node Quick Start, Using Clon, Introduction, Top
@chapter Quick Start
In this chapter, we quickly build a very short program to get you
started. We assume that you have properly installed @clon{} for ASDF.
Since several bits are compiler-specific, we also assume that SBCL is
used in this example. If you want to try this program for real, the full
listing is available for cut'n paste in @ref{Quick Start Program}. For a
slightly longer example, have a look at the @t{demo} program provided in
the distribution.

Let's put us in the @cl{} user package, and load @clon{} first. @clon{}
lives in a package named @samp{com.dvlsoft.clon}. The @t{demo} program
from the distribution shows how to create a nickname if you find this
too long, or if you don't want to @t{use-package} it.

@cartouche
@verbatim
(in-package :cl-user)

(require :asdf)
(asdf:operate 'asdf:load-op :com.dvlsoft.clon)
(use-package :com.dvlsoft.clon)
@end verbatim
@end cartouche

@cindex Synopsis
@findex defsynopsis
@cindex Postfix
@cindex Text, in synopsis
@cindex Options, in synopsis
@cindex Groups, in synopsis
@cindex Help String
The next thing you want to do is to create a set of options, groups or
texts that your application will recognize and/or display in its help
string. The structure of your @cmdline{} is known to @clon{} as the
@dfn{synopsis}. In order to create it, use the macro @code{defsynopsis}.

@foindex{defsynopsis, :postfix}
@fiindex{defsynopsis, text}
@fiindex{defsynopsis, options}
@fiindex{defsynopsis, group}
@cartouche
@verbatim
(defvar *synopsis*
  (defsynopsis (:postfix "FILES...")
    (text :contents "A very short program.")
    (group (:header "Immediate exit options:")
      (flag :short-name "h" :long-name "help"
	    :description "Print this help and exit.")
      (flag :short-name "v" :long-name "version"
	    :description "Print version number and exit."))))
@end verbatim
@end cartouche

Note that the synopsis has a double role: it not only serves to define
the options recognized by your application, but also the order in which
every element appears in the help string. In that particular example, we
define a line of text and a group with a header and two flags.

@cindex Context, creation
@findex make-context
Now, we are going to define a function @code{main} for our standalone
application. The first thing that we need to do is create a
@dfn{context}. A context is an object that @clon{} uses to store various
things, including some state related to the parsing of the @cmdline{}.
You create a context with the function @code{make-context}. Our context
needs to be associated with the synopsis we created earlier.

@cartouche
@verbatim
(defun main ()
  "Entry point for our standalone application."
  (make-context :synopsis *synopsis*)
@end verbatim
@end cartouche

@cindex Retrieval, explicit
@cindex Options, retrieval, explicit
@findex getopt
@cindex Help String, display
@findex help
At that point, @clon{} is ready to retrieve the options you want from
the @cmdline{}. Let's first see if the user has used the option
@option{-h}, and give him the help string. Option retrieval is done with
the function @code{getopt}, and automatic help string output with the
function @code{help}. Note that what we do here is @emph{not} process
the @cmdline{} in sequence, but look directly for a specific option by
name.

@fkindex{getopt, :short-name}
@cartouche
@verbatim
  (when (getopt :short-name "h")
    (help)
    (quit))
@end verbatim
@end cartouche

@cindex Retrieval, sequential
@cindex Options, retrieval, sequential
@findex do-cmdline-options
And now, we are going to retrieve the other options and simply print
them. This time however, we process the @cmdline{} sequentially. This is
done with the @code{do-cmdline-options} macro. We also close the
@code{main} function.

@cartouche
@verbatim
  (do-cmdline-options (option name value)
    (print (list option name value)))
  (terpri)
  (quit))
@end verbatim
@end cartouche

Finally, time to save the Lisp image.

@cartouche
@verbatim
(save-lisp-and-die "test"
  :toplevel #'main :executable t :save-runtime-options t)
@end verbatim
@end cartouche

We're now ready to compile this industrial-scale application and deliver
it to the world:

@verbatim
CC=gcc sbcl --script test.lisp
@end verbatim

and voila!



@c ====================================================================
@c Using Clon
@c ====================================================================
@node Using Clon, Extending Clon, Quick Start, Top
@chapter Using Clon

Using @clon{} in your application involves three steps. In the first
step, you create a @dfn{synopsis}, which is a description of your
application's @cmdline{}. In the second step, you create a
@dfn{context}, which associates the synopsis with this specific
execution of the program. In the third step finally, you retrieve the
options values. Steps one and two form the @dfn{initialization phase} of
@clon{}, while step 3 is called the @dfn{runtime phase}.

@menu
* Synopsis Definition:: Describing your command-line
* Context Creation::    Instantiating your command-line
* Option Retrieval::    Getting the options values
* Help::                Generating the help string
@end menu


@c -------------------
@c Synopsis Definition
@c -------------------
@node Synopsis Definition, Context Creation, Using Clon, Using Clon
@section Synopsis Definition
@cindex Initialization Phase
@cindex Phase, initialization
@cindex Synopsis
@cindex Help String

Step one of the @clon{} initialization phase consists in defining a
@dfn{synopsis}. A synopsis is essentially a description of your
application's @cmdline{}: it describes what are the available options,
whether your application has a postfix @etc{} The synopsis, however,
plays a second role: it also describes the contents of your
application's help string. When you create a synopsis, you describe the
@cmdline{} and the help string at the same time.

@menu
* Synopsis Items::              Defsynopsis and its contents
* Built-In Option Types::       The exhaustive list
* Advanced Synopsis Creation::  The non-declarative way
@end menu

@node Synopsis Items, Built-In Option Types, Synopsis Definition, Synopsis Definition
@subsection Synopsis Items
Look again at the synopsis definition provided in @ref{Quick Start}.

@cartouche
@verbatim
(defsynopsis (:postfix "FILES...")
  (text :contents "A very short program.")
  (group (:header "Immediate exit options:")
    (flag :short-name "h" :long-name "help"
	  :description "Print this help and exit.")
    (flag :short-name "v" :long-name "version"
	  :description "Print version number and exit.")))
@end verbatim
@end cartouche

You define a synopsis with the @code{defsynopsis} macro.

@defmac defsynopsis (OPTIONS@dots{}) ITEMS@dots{}
Define a new synopsis and return it. @var{OPTIONS} are key/value pairs.
@var{ITEMS} is a list of either text, group, or option descriptions.

@cindex Postfix
@foindex{defsynopsis, :postfix}
The first argument to @code{defsynopsis} is a list of key/value pairs.
Currently, the only available key is @code{:postfix}. Its value is a
string which will appear at the end of the synopsis line in the help
string. When you provide a postfix, you also implicitely tell @clon{}
that your application accepts non-option arguments at the end of the
@cmdline{}. See @enduserref{Option Separator} for more information on
the behavior of @clon{} with respect to postfixes.

The remainder of the arguments to @code{defsynopsis} are text, group or
options descriptions.
@end defmac

We now examine the syntax for each one of them.
@menu
* Text::        Adding arbitrary text
* Options::     Adding options
* Groups::      Adding groups
@end menu

@node Text, Options, Synopsis Items, Synopsis Items
@subsubsection Text
@cindex Text
@cindex Text, in synopsis
@fiindex{defsynopsis, text}
In order to add arbitrary text to your help string, use the following
form:

@verbatim
(text :contents "Blah blah.")
@end verbatim

Try to make proper sentences when adding arbitrary text. You can use
explicit newline characters in your text if you really want to go next
line, but in general, you should not worry about the formatting because
the themes are here to do so. In particular, don't finish your text with
a newline. This would break potential theme specifications.

@node Options, Groups, Text, Synopsis Items
@subsubsection Options
@cindex Options
@cindex Options, in synopsis
@fiindex{defsynopsis, options}
In order to add an option to your help string, you must provide a list
beginning with the option type and followed by key/value pairs
describing the option's properties. For instance, to add a flag with a
short name and a description, you could do this:

@verbatim
(flag :short-name "h" :description "Print this help and exit.")
@end verbatim

Option properties vary depending on the option type. The exact list of
available option types, and the corresponding properties are described
in @ref{Built-In Option Types}.

@node Groups, , Options, Synopsis Items
@subsubsection Groups
@cindex Groups
@cindex Groups, in synopsis
@fiindex{defsynopsis, group}
In order to add a group to your help string, you must use the following
form:

@noindent
@t{(group (@var{OPTIONS}@dots{}) @var{ITEMS}@dots{})}

@cindex Groups, options, header
The group's options are key/value pairs. Currently, the only available
option is @code{:header}. The corresponding value must be a string which
will be displayed above the group's contents in the help string. The
same formatting recommendations as for arbitrary text apply
(@pxref{Text}).

@cindex Text, in groups
@cindex Groups, items, text
@cindex Options, in groups
@cindex Groups, items, options
@cindex Groups, in groups
@cindex Groups, items, groups
The group's items are simply arbitrary text, option or sub-group
descriptions as we've just seen.


@node Built-In Option Types, Advanced Synopsis Creation, Synopsis Items, Synopsis Definition
@subsection Built-In Option Types
@cindex Built-In Option Types
@cindex Options, built-in types
@cindex Options, types, built-in
In this section, we will review all the built-in option types that
@clon{} provides, along with their corresponding properties. You can use
them directly in your synopsis description. For adding personal option
types to @clon{}, see @ref{Extending Clon}.

@menu
* Common Properties::                   For all options
* Flags::                               Built-in options without arguments
* Common Valued Option Properties::     For all valued options
* Built-In Valued Options::             Built-in options with arguments
@end menu

@node Common Properties, Flags, Built-In Option Types, Built-In Option Types
@subsubsection Common Properties
@cindex Options, common properties
@cindex Options, properties, common
All option types in @clon{}, including those you define yourself
(@pxref{Extending Clon}), have a set of basic, common properties. Here
is a list of them.

@table @code
@item :short-name
@copindex{short name}
The option's short name. A string or @code{nil}.
@item :long-name
@copindex{long name}
The option's long name. A string or @code{nil}.
@item :description
@copindex{description}
The option's descriptive text. A string or @code{nil}. The same
formatting recommendations as for arbitrary text apply (@pxref{Text}).
@item :env-var
@copindex{environment variable}
The option's associated environment variable. A string or @code{nil}.
@end table

Note that an option is required to have at least one name (either short
or long). Non-@code{nil} but empty names are also prohibited, and of
course, a short name cannot begin with a dash (otherwise, it would be
mistaken for a long name, but did I really need to mention this?).

@node Flags, Common Valued Option Properties, Common Properties, Built-In Option Types
@subsubsection Flags
@cindex Flags
@ocindex{flag}
In @clon{}, options that don't take any argument are of type
@code{flag}. These options don't provide additional properties on top of
the common set described in @ref{Common Properties}. All properties
default to @code{nil}.

@node Common Valued Option Properties, Built-In Valued Options, Flags, Built-In Option Types
@subsubsection Common Valued Option Properties
@cindex Valued Options
@cindex Options, valued
All non-flag options in @clon{} are said to be @dfn{valued}. All valued
options, including those you define yourself (@pxref{Extending Clon}),
share a set of additional properties. Here is a list of them.

@table @code
@item :argument-name
@cvopindex{argument name}
The name of the option's argument, as it appears in the help string. It
defaults to @code{"ARG"}, so that for instance, a @samp{name} option
would appear like this: @samp{--name=ARG}.
@item :argument-type
@cvopindex{argument type}
The status of the argument. Possible values are @code{:required} (the
default) and @code{:mandatory} which are synonyms, or @code{:optional}.
@item :default-value
@cvopindex{default value}
@item :fallback-value
@cvopindex{fallback value}
The option's default and fallback values. Remember that a fallback value
only makes sense when the argument is optional. Besides, also when the
argument is optional, you need to provide at least a fallback or a
default value (or both of course).
@item :nullablep
@cvopindex{nullable}
Whether the option accepts a null value. Default to @code{nil}. This
property is useful when you define your own option types (@pxref{Value
Check Protocol}).
@end table

@node Built-In Valued Options, , Common Valued Option Properties, Built-In Option Types
@subsubsection Built-In Valued Options
@cindex Options, types, valued
@cindex Built-In Option Types, valued
@cindex Options, built-in types, valued
@cindex Options, types, built-in, valued
@clon{} currently defines 6 built-in valued option types. These option
types may change the default value for some common properties, and / or
provide additional properties of their own. All of this is described
below.

@table @code
@item stropt
@cindex String Options
@ocindex{stropt}
@voindex{stropt}
@cvopindex{argument name}
This option type is for options taking strings as their argument. String
options don't provide any additional properties, but their default
argument name is changed from @code{"ARG"} to @code{"STR"}.
@item lispobj
@cindex Lisp Options
@ocindex{lispobj}
@voindex{lispobj}
@cvopindex{argument name}
@vopindex{lispobj, type specifier}
This option type is for options taking any kind of Lisp object as their
argument. @code{lispobj} options change their default argument name from
@code{"ARG"} to @code{"OBJ"}. Also, they provide an additional property
called @code{:typespec} which must be a @cl{} type specifier that the
argument must satisfy. It defaults to @code{t}.
@item enum
@cindex Enumerations
@ocindex{enum}
@voindex{enum}
@cvopindex{argument name}
@vopindex{enum, enumeration}
@bioindex{version}
This option type is for options taking values from an enumerated set.
@code{enum} options change their default argument name from @code{"ARG"}
to @code{"TYPE"}. Also, they provide an additional property called
@code{:enum} which must be a list of @cl{} keywords enumerating the
possible values. In fact, the values are not the keywords themselves,
but rather their corresponding symbol name. This means that an end-user
needs not be aware of the underlying implementation, and actually does
not use a colon when providing an argument. The end-user also has the
ability to abbreviate the possible values. Look at the
@code{--clon-version} built-in option for an example.
@item path
@cindex Path Options
@ocindex{path}
@voindex{path}
@cvopindex{argument name}
@cvopindex{nullable}
@vopindex{path, path type}
This option type is for options taking a colon-separated list of
pathnames as argument. @code{path} options change their default argument
name from @code{"ARG"} to @code{"PATH"} and their default nullable
property from @code{nil} to @code{t}. Also, they provide an additional
property called @code{:type} which specifies the kind of path which is
expected. Possible values are: @code{:file}, @code{:directory},
@code{:file-list}, @code{:directory-list} or @code{nil} (meaning that
anything is allowed).
@item switch
@cindex Switches
@ocindex{switch}
@voindex{switch}
@cvopindex{argument type}
@cvopindex{nullable}
@vopindex{switch, argument style}
This option type is for Boolean options. @code{switch} options change
their default nullable property from @code{nil} to @code{t}, and their
default argument type from required to optional. Also, instead of using
the @code{:argument-name} property, @code{switch} options provide a
property called @code{:argument-style}. Possible values are
@code{:yes/no} (the default), @code{:on/off}, @code{:true/false},
@code{:yup/nope}, @code{:yeah/nah}. Note that this property determines
the argument name @emph{only}. All possible switch arguments
(@pxenduserref{Switches}) are always availble to all switches.
@item xswitch
@cindex Extended Switches
@ocindex{xswitch}
@voindex{xswitch}
@cvopindex{argument type}
@cvopindex{nullable}
@vopindex{xswitch, enumeration}
@bioindex{highlight}
This option type stands for @dfn{extended} switch. Extended switches
result from the mating of a male switch and a female enumeration, or the
other way around (elementary decency prevents me from describing this
mating process in detail): their possible values are either Boolean or
from an @code{:enum} property as in the case of @code{enum} options.
@code{xswitch} options change their default nullable property from
@code{nil} to @code{t}, and their default argument type from required to
optional.
@end table

@node Advanced Synopsis Creation, , Built-In Option Types, Synopsis Definition
@subsection Advanced Synopsis Creation
@findex defsynopsis
The fact that @code{defsynopsis} lets you define things in a
@emph{declarative} way has not escaped you. Declarative is nice but
sometimes it gets in the way, so it is time to see how things work under
the hood. Every item in a synopsis is in fact implemented as an object
(an instance of some class), so it turns out that @code{defsynopsis}
simply is a convenience wrapper around the corresponding constructor
functions for all such objects. Instead of using @code{defsynopsis}, you
can then use those constructor functions explicitely.

@menu
* Constructors::        The expansion of defsynopsis
* Advantages::          Yes, but why?
* Group Definition::    The declarative way
@end menu

@node Constructors, Advantages, Advanced Synopsis Creation, Advanced Synopsis Creation
@subsubsection Constructors
Let's have a look at the expansion of @code{defsynopsis} from the quick
start example (@pxref{Quick Start}).

The original code is like this:

@cartouche
@verbatim
(defsynopsis (:postfix "FILES...")
  (text :contents "A very short program.")
  (group (:header "Immediate exit options:")
    (flag :short-name "h" :long-name "help"
	  :description "Print this help and exit.")
    (flag :short-name "v" :long-name "version"
	  :description "Print version number and exit.")))
@end verbatim
@end cartouche

And once the macro is expanded, it will look like this:

@findex make-synopsis
@findex make-text
@findex make-group
@findex make-flag
@findex defsynopsis@r{, expansion}
@cartouche
@verbatim
(make-synopsis :postfix "FILES..."
  :item (make-text :contents "A very short program.")
  :item (make-group :header "Immediate exit options:"
          :item (make-flag :short-name "h"
                           :long-name "help"
                           :description "Print this help and exit.")
          :item (make-flag :short-name "v"
                           :long-name "version"
                           :description "Print version number and exit.")))
@end verbatim
@end cartouche

As you can see, every synopsis element has a corresponding
@code{make-@var{SOMETHING}} constructor, and the keywords used here and
there in @code{defsyopsis} are in fact initialization arguments to those
constructors. We now examine those constructors in greater detail.

@cindex Options, creation
@defun make-text @code{:contents} STRING
@fiaindex{make-text, :contents}
Create an arbitrary text object whose contents is @var{STRING}.
@end defun

@c FIXME: I would like an environment without indexing here.
@defun make-@var{OPTION} :INITARG INITVAL@dots{}
@findex make-flag
@findex make-stropt
@findex make-lispobj
@findex make-enum
@findex make-path
@findex make-switch
@findex make-xswitch
Create a new @var{OPTION} object, @var{OPTION} being any built-in option
type (@code{flag}, @code{stropt} @etc{}, see @ref{Built-In Valued
Options}) or user-defined one (@pxref{Extending Clon}). For a list of
available initialization arguments (depending on the option type),
@xref{Built-In Option Types}.
@end defun

@cindex Groups, creation
@defun make-group @code{:header} STRING @code{:item} ITEM1 @
@code{:item} ITEM2@dots{}
@fiaindex{make-group, :header}
@fiaindex{make-group, :item}
Create a group object whose header is @var{STRING}. Every @var{ITEM} is
an arbitrary text object, option object or group object. The order is
important.
@end defun

@defun make-synopsis @code{:postfix} STRING @code{:item} ITEM1 @
@code{:item} ITEM2@dots{}
@fiaindex{make-synopsis, :postfix}
@fiaindex{make-synopsis, :item}
Create a synopsis object whose postfix is @var{STRING}. Every @var{ITEM} is
an arbitrary text object, option object or group object. The order is
important.
@end defun

@node Advantages, Group Definition, Constructors, Advanced Synopsis Creation
@subsubsection Advantages
@findex defsynopsis
So, why would you want to use constructors directly, instead of using
@code{defsynopsis} declaratively? There are several reasons for doing
so.
@enumerate
@item
Some people prefer to declare (or should I say, create) their arbitrary
texts, options and groups locally, in files, modules or ASDF components
where they belong. In such a case, you need to keep references to the
corresponding objects in order to compute the synopsis in the end.
@item
Since using constructors explicitely allows you to keep references to
the created objects, these objects can be @emph{reused}. For instance,
you can use the same text at different places, you can also use a single
option several times, or even a single group several times so that its
items appear in different places @etc{} Note that @clon{} knows its way
around multiple occurrences of the same object: even if you use the same
option object several times in a synopsis, @clon{} only maintains a
single option definition.
@end enumerate

@node Group Definition, , Advantages, Advanced Synopsis Creation
@subsubsection Group Definition
@cindex Groups, definition
There is one last point we need to address in order to complete this
section. There might be times when you need to manipulate an explicit
group object, but the object itself can still be created in a
declarative way because you don't need to keep handles on its items. For
this, @clon{} provides a macro called @code{defgroup}.

@defmac defgroup (OPTIONS@dots{}) ITEMS@dots{}
@cindex Groups, in synopsis
@fiindex{defsynopsis, group}
@foindex{defgroup, :header}
Define a new group and return it. This macro behaves exactly like the
@code{group} form in a call to @code{defsynopsis} (@pxref{Groups}).
@end defmac

In fact, an intermediate step in the expansion of the @code{defsynopsis}
macro is to transform @code{group} forms into @code{defgroup} macro
calls.



@c ----------------
@c Context Creation
@c ----------------
@node Context Creation, Option Retrieval, Synopsis Definition, Using Clon
@section Context Creation
@cindex Initialization Phase
@cindex Phase, initialization
@cindex Context

Step two of the @clon{} initialization phase consists in creating a
@dfn{context}. A context is an object representing a particular instance
of your program, for example (and most notably) with an actual
@cmdline{} as the user typed it.
@cindex Context, creation
@findex make-context
You create a context with the @code{make-context} function.

@defun make-context :INITARG INITVAL@dots{}
Create a new context. The following initargs are available.

@table @code
@item :synopsis
@fiaindex{make-context, :synopsis}
Use this key to associate the context with a synopsis previously defined
by @code{defsynopsis} (@pxref{Synopsis Definition}).
@item :error-handler
@fiaindex{make-context, :error-handler}
The behavior to adopt in case an error happens during the initialization
phase, when the @cmdline{} is parsed. This is where you get errors like
``unknown option'', ``invalid argument'' @etc{}). Possible values are
@code{:quit} and @code{:none}. When @code{:quit} and an error happens,
print the error and terminate the application (this is the default).
When @code{:none}, no error handler is installed, which means that the
behavior will depend on the underlying @cl{} implementation. For
instance, the debugger might be raised or a stack trace might be printed
(this is the case in SBCL with the @option{--script} option).
@item :getopt-error-handler
@fiaindex{make-context, :getopt-error-handler}
The behavior to adopt in case an error happens when an option is
retrieved in any way (@pxref{Option Retrieval}). Since @cmdline{} errors
are throw at initialization time, the errors you can get here are
related to retrieval from the environment. Possible values are the same
as above, and the same comments apply as well.
@end table
@end defun


@c ----------------
@c Option Retrieval
@c ----------------
@node Option Retrieval, Help, Context Creation, Using Clon
@section Option Retrieval
@cindex Runtime Phase
@cindex Phase, runtime
@cindex Retrieval
@cindex Options, retrieval

During the runtime phase of @clon{}, your main activity will be to
retrieve options and their values. @clon{} provides two techniques for
retrieving options: you can request the value for a specific option
directly, or you can process the @cmdline{} sequentially, which is the
more traditional approach.

Both of these techniques can be freely combined together at any time,
because @clon{} keeps track of the current status of the @cmdline{}. In
fact, @clon{} never works on the original @cmdline{}, but uses a mutable
@emph{copy} of it after parsing.

@menu
* Explicit Retrieval::          Accessing options by name
* Sequential Retrieval::        Accessing options in order
@end menu

@node Explicit Retrieval, Sequential Retrieval, Option Retrieval, Option Retrieval
@subsection Explicit Retrieval
@cindex Retrieval, explicit
@cindex Options, retrieval, explicit
Since @clon{} lets you retrieve options on demand (at any time), it
makes sense to be able to request the value of a specific option
explicitely. For instance, you might want to try the @samp{--help}
option first, without looking at the rest of the @cmdline{} because the
application will in fact quit immediately after having displayed the
help string.

@defun getopt :KEY VALUE@dots{}
Retrieve the value of a specific option. The following keys are
available.

@table @code
@item :short-name
@item :long-name
@fkindex{getopt, :short-name}
@fkindex{getopt, :long-name}
Use one of these 2 keys to specify the name of the option you wish to
retrieve.
@item :option
@fkindex{getopt, :option}
Alternatively, you can use a handle to an option object
(@pxref{Constructors}).
@item :error-handler
@fkindex{getopt, :error-handler}
Lets you locally override the error handler established by the
@code{:getopt-error-handler} to @code{make-context} (@pxref{Context
Creation}). Note again that this handler will only affect retrieval from
the environment.
@end table

This function return two values: the option's value and the value's
source.
@end defun

The value's source may have the following forms:
@table @code
@item (:cmdline @var{NAME})
@cindex Values, source, @cmdline{}
This is for options found on the @cmdline{}. @var{NAME} is the name used
on the @cmdline{}. It can be the option's long or short name, or a
completed long name if the option's name was abbreviated. A completed
name displays the omitted parts in parentheses (@code{"he(lp)"} for
instance).
@item (:environment @var{VAR})
@copindex{environment variable}
@cindex Values, source, environment
This is for options not found on the @cmdline{} but for which there is
an associated environment variable set in the application's environment.
@var{VAR} is the name of the corresponding environment variable.
@item :default
@cvopindex{default value}
@cindex Values, source, default
This is for options not found anywhere, but for which a default value
was provided.
@end table

@cindex Flags
@ocindex{flag}
@findex getopt
Note that flags don't take any argument, so @code{getopt} returns a
virtual value of @code{t} when they are found, or a corresponding
environment variable exists in the environment.

@cvopindex{nullable}
@findex getopt
When an option is not found anywhere and there is no default value,
@code{getopt} just returns nil (no second value). Also, note that when
your option is nullable, you @emph{need} to handle the second retrun
value to make the difference between an option not found, and an actual
value of @code{nil}.


@node Sequential Retrieval, , Explicit Retrieval, Option Retrieval
@subsection Sequential Retrieval
@cindex Retrieval, sequential
@cindex Options, retrieval, sequential
The more traditional approach to option retrieval is to scan the
@cmdline{} for options in their order of appearance. @clon{} supports
this by providing you with one function and two macros, as explained
below.

@defun getopt-cmdline
Get the @dfn{next} @cmdline{} option, that is, the first option on the
@cmdline{} that has not been previously retrieved, either explicitely or
sequentially.

When there are no more options on the @cmdline{}, this function returns
@code{nil}. Otherwise, three values are returned: the corresponding
option object from the synopsis definition (@pxref{Constructors}), the
name used on the @cmdline{}, and the option's value. As in the case of
explicit retrieval (@pxref{Explicit Retrieval}), the option's name may
be completed in case of abbreviation.
@end defun

@defmac multiple-value-getopt-cmdline (OPTION NAME VALUE) BODY
Evaluate @var{BODY} with @var{OPTION}, @var{NAME} and @var{VALUE} bound
to the values returned by the @code{getopt-cmdline} function above.
@end defmac

@defmac do-cmdline-options (OPTION NAME VALUE) BODY
As above, but loop over all @cmdline{} options.
@end defmac


@c ----
@c Help
@c ----
@node Help, , Option Retrieval, Using Clon
@section Help
One of the first motivations in the design of @clon{} was to automate
the generation of the help string, which is a very boring maintenance
task to do by hand. The application's synopsis contains all the
necessary information to do so. In order to print your application's
help string, use the @code{help} function.

@defun help @code{:item} ITEM
@bioindex{search-path}
@cindex CLON_SEARCH_PATH
@cindex Environment Variables, CLON_SEARCH_PATH
@bioindex{highlight}
@cindex CLON_HIGHLIGHT
@cindex Environment Variables, CLON_HIGHLIGHT
@bioindex{theme}
@cindex CLON_THEME
@cindex Environment Variables, CLON_THEME
@bioindex{line-width}
@cindex CLON_LINE_WIDTH
@cindex Environment Variables, CLON_LINE_WIDTH
Print the application's help string. Printing honors the search path,
theme, line width and highlight settings provided by the corresponding
built-in options (@pxenduserref{Theme Mechanism}).
@end defun

@fkindex{help, :item}
By default, @code{help} prints the whole application help string.
However, if you have kept a handle on any synopsis item (option, text,
group), you can pass it as the value of the @code{:item} key, and
@clon{} will only print the help string for that particular item.

@bioindex{help}
For instance, this is how the @option{clon-help} option is implemented:
it only prints the help string of the built-in @clon{} group.

FIXME: mention the use in conjunction with hidden groups or options.



@c ====================================================================
@c Extending Clon
@c ====================================================================
@node Extending Clon, Advanced Usage, Using Clon, Top
@chapter Extending Clon

As you know, @clon{} already provides seven built-in option types: flags
and six other types for valued options (@pxref{Built-In Valued
Options}). After using @clon{} for a while, you may find that however
brilliant and perfectly designed it is, none of the provided built-in
types fullfill your requirements exactly. There are two ways around
this: the right way or the wrong way (hint).

@cindex String Options
@ocindex{stropt}
The wrong, although perhaps quicker way would be to use the
@code{stropt} option type to simply retrieve unprocessed string values,
and then do whatever tweaking required on them. In doing so, you risk
reinventing some of @clon{}'s wheels.

The right way is to define a new option type. Properly defined option
types are a good thing because they allow for reusability and also
extensibility, since new option types can always be defined on top of
others.
@cindex Enumerations
@ocindex{enum}
In this chapter we explain how to extend @clon{} by providing new option
types. We illustrate the process with the example of the built-in
@code{enum} one.

@cindex Valued Options
@cindex Options, valued
@cindex Flags
@ocindex{flag}
Oh, and I almost forgot. I hope it is obvious to everyone that new
option types are always @emph{valued}. There's no point in extending
@clon{} with options that don't take any arguments, since we already
have flags.

@menu
* New Option Types::    In four steps
* Extension Tips::      Some advice
@end menu


@c ----------------
@c New Option Types
@c ----------------
@node New Option Types, Extension Tips, Extending Clon, Extending Clon
@section New Option Types
@cindex Option Types, in files
@cindex Files, one per option type
From a software engineering point of view, it is better to implement new
option types in a file of their own, preferably named after the option
type itself, and to put this file in the @clon{} package, like this:

@cartouche
@verbatim
(in-package :com.dvlsoft.clon)
@end verbatim
@end cartouche

Creating your own option type involves 4 steps: providing a class for
them, implementing two protocols related to argument/value conversion,
and providing a constructor function. We now review those 4 steps in
order.

@menu
* New Option Classes::          Step 1
* Value Check Protocol::        Step 2
* Conversion Protocol::         Step 3
* Constructor Functions::       Step 4
@end menu

@node New Option Classes, Value Check Protocol, New Option Types, New Option Types
@subsection New Option Classes
@clsindex{option}
@clsindex{valued-option}
@clon{} maintains a class hierarchy for all option types. The mother of
all option types is the @code{option} abstract class. It provides slots
for storing the options'short and long names, description and associated
environment variable. Valued options inherit from an abstract subclass
of @code{option} called @code{valued-option}. This class provides
additional slots for storing the argument name and status (optional or
mandatory), fallback and default values, and nullable status.

@cindex User-Defined Option Classes
@cindex Option Classes, user-defined
In order to create a new option type, @clon{} provides a convenience
macro named @code{defoption}.

@defmac defoption CLASS SUPERCLASSES SLOTS &rest OPTIONS
Wrapper around @code{defclass} for defining a new valued option type.
Option types created like this implicitely inherit from
@code{valued-option} and in turn @code{option}, so you don't need to put
them explicitely in the @var{SUPERCLASSES} list.
@end defmac

Let's look at the enumeration example now.

@cartouche
@verbatim
(defoption enum (enum-base)
  ((argument-name ;; inherited from the VALUED-OPTION class
    :initform "TYPE"))
  (:documentation "The ENUM class.
This class implements options whose values belong to a set of keywords."))
@end verbatim
@end cartouche

@cindex Enumerations
@ocindex{enum}
@voindex{enum}
@vopindex{enum, enumeration}
@cindex Extended Switches
@ocindex{xswitch}
@voindex{xswitch}
@vopindex{xswitch, enumeration}
@clsindex{enum-base}
As you can see, this class inherits from @code{enum-base}, which is the
class providing the @code{enum} slot. The reason for this split is that
there are currently two option types providing enumeration-like
facility: @code{enum} and @code{xswitch}, so @code{xswitch} also
inherits from @code{enum-base}.

@clsindex{valued-option}
@cvopindex{argument name}
There are no new slots in this class, but the @code{argument-name} slot
provided by the @code{valued-option} class has its initform changed from
@code{"ARG"} to @code{"TYPE"}.

@node Value Check Protocol, Conversion Protocol, New Option Classes, New Option Types
@subsection Value Check Protocol
@cindex Value Check Protocol
@cindex Protocols, value check
Now that we have our new option class, we need to implement the
so-called @dfn{value check} protocol. This protocol is used to make sure
that values provided for options of your new type actually comply with
the type in question. Values currently checked are fallback values,
default values, and values provided from a debugger restart FIXME:
expand this.

The value check protocol is implemented through a @code{check-value}
generic function for which you must provide a method.

@ecindex invalid-value
@deffn {Generic Function} check-value OPTION VALUE
Check that @var{VALUE} is valid for @var{OPTION}. If @var{VALUE} is
valid, return it. Otherwise, raise an @code{invalid-value} error.
@end deffn

As you can see, you need to provide a method with the first argument
specialized to your new option type. This method must return @var{VALUE}
if it is okay, and raise an @code{invalid-value} error otherwise.

@fmindex{check-value, :around}
This protocol additionally has the following @code{:around} method:

@cartouche
@verbatim
(defgeneric check-value (valued-option value)
  (:method :around ((option valued-option) value)
    "Bypass the provided user method if VALUE is nil and OPTION is nullable."
    ;; #### NOTE: check-value must return the value if it is valid. This is
    ;; exactly what happens below when the unless clause fails (it returns
    ;; nil).
    (unless (and (nullablep option) (null value))
      (call-next-method))))
@end verbatim
@end cartouche

@cvopindex{nullable}
This means that if your option is nullable (@pxref{Common Valued Option
Properties}) and the provided value is @code{nil}, your method will
actually be bypassed. Nullable options turn out to be very common, so
this simplifies the writing of @code{check-value} methods.

@ecindex invalid-value
@clon{} maintains a hierarchy of error conditions. The
@code{invalid-value} error condition is defined like this:

@cartouche
@verbatim
(define-condition invalid-value (option-error)
  ((value :documentation "The invalid value."
	  :initarg :value
	  :reader value)
   (comment :documentation "An additional comment about the error."
	    :type string
	    :initarg :comment
	    :reader comment))
  (:report (lambda (error stream)
	     (format stream "Option ~A: invalid value ~S.~@[~%~A~]"
	       (option error) (value error) (comment error))))
  (:documentation "An invalid value error."))
@end verbatim
@end cartouche

@ecindex invalid-value
@ecsindex{invalid-value, value}
@ecsindex{invalid-value, comment}
When the error is raised, you must fill in the @code{value} and
@code{comment} slots appropriately.
@ecindex option-error
@ecsindex{option-error, option}
The super-condition @code{option-error} provides an additional
@code{option} slot that you must also fill in when the error is raised.

@findex check-value@r{, methods, for enumerations}
Let's look at the enumeration example now.

@cartouche
@verbatim
(defmethod check-value ((enum enum) value)
  "Check that VALUE is a valid ENUM."
  (unless (keywordp value)
    (error 'invalid-value
	   :option enum
	   :value value
	   :comment "Value must be a keyword."))
  (unless (member value (enum enum))
    (error 'invalid-value
	   :option enum
	   :value value
	   :comment (format nil "Valid values are: ~A."
		      (symbols-to-string (enum enum)))))
  value)
@end verbatim
@end cartouche

@cindex Enumerations
@ocindex{enum}
@voindex{enum}
@cvopindex{nullable}
This code should be self-explanatory. We first check that we got a
keyword, and then that it belongs the the enumeration. Also, note that
the nullable case is not treated explicitely. If the option was nullable
and @code{nil} was provided, this method is not called at all. If
@var{VALUE} is non-@var{nil}, then it goes through this method as any
other value, and if @code{nil} was provided for a non-nullable option,
the checks above will fail all the same.


@node Conversion Protocol, Constructor Functions, Value Check Protocol, New Option Types
@subsection Conversion Protocol
@cindex Conversion Protocol
@cindex Protocols, conversion
The next protocol we need to implement is the so-called @dfn{conversion}
protocol. This protocol is used to convert option arguments (that is,
strings) to an actual value of the proper type. Arguments currently
converted may come the @cmdline{}, the value of an environment variable,
and arguments provided from a debugger restart FIXME: expand this.

The conversion protocol is implemented through a @code{convert} generic
function for which you must provide a method.

@ecindex invalid-argument
@deffn {Generic Function} convert OPTION ARGUMENT
Convert @var{ARGUMENT} to @var{OPTION's} value. If @var{ARGUMENT} is
invalid, raise an @code{invalid-argument} error.
@end deffn

As you can see, you need to provide a method with the first argument
specialized to your new option type. This method must return the
conversion of @var{ARGUMENT} to the appropriate type if it is valid, and
raise an @code{invalid-argument} error otherwise.

@ecindex invalid-argument
The @code{invalid-argument} error condition is defined like this:

@cartouche
@verbatim
(define-condition invalid-argument (option-error)
  ((argument :documentation "The invalid argument."
	     :type string
	     :initarg :argument
	     :reader argument)
   (comment :documentation "An additional comment about the error."
	    :type string
	    :initarg :comment
	    :reader comment))
  (:report (lambda (error stream)
	     (format stream "Option ~A: invalid argument ~S.~@[~%~A~]"
	       (option error) (argument error) (comment error))))
  (:documentation "An invalid argument error."))
@end verbatim
@end cartouche

@ecindex invalid-argument
@ecsindex{invalid-argument, argument}
@ecsindex{invalid-argument, comment}
When the error is raised, you must fill in the @code{argument} and
@code{comment} slots appropriately.
@ecindex option-error
@ecsindex{option-error, option}
As before, the super-condition @code{option-error} provides an
additional @code{option} slot that you must also fill in when the error
is raised.

@findex convert@r{, methods, for enumerations}
Let's look at the enumeration example now.

@cartouche
@verbatim
(defmethod convert ((enum enum) argument)
  "Convert (possibly abbreviated) ARGUMENT to ENUM's value.
If ARGUMENT doesn't name one of ENUM's symbols, raise a conversion error."
  (or (closest-match argument (enum enum) :ignore-case t :key #'symbol-name)
      (error 'invalid-argument
	     :option enum
	     :argument argument
	     :comment (format nil "Valid arguments are: ~A."
			(symbols-to-string (enum enum))))))
@end verbatim
@end cartouche

@cindex Enumerations
@ocindex{enum}
@voindex{enum}
@vopindex{enum, enumeration}
Since enumerations allow their arguments to be abbreviated, a utility
function is used to find the closest match between an argument and the
possible values. Otherwise, the @code{invalid-argument} error is raised.


@node Constructor Functions, , Conversion Protocol, New Option Types
@subsection Constructor Functions
@findex @r{Constructors}
The last required step to complete our new option type extension is to
provide a @dfn{constructor} function that wraps around
@code{make-instance} on the corresponding option class. I won't insult
you by explaining how to write a constructor. Let me just give four good
reasons why providing constructors is important.

Providing a constructor for every new option type is important because:
@enumerate
@item
it is important,
@item
it is a good software engineering practice,
@item
it is important,
@item
@findex defsynopsis
@findex defgroup
and above all, it makes your new option type automatically available in
calls to @code{defsynopsis} and @code{defgroup} (@pxref{Synopsis Items}
and @ref{Group Definition}).
@end enumerate


@cindex Enumerations
@ocindex{enum}
@voindex{enum}
@cindex Valued Options, @t{enum}, constructor
@cindex Options, valued, @t{enum}, constructor
@findex @r{Constructors, }@t{make-enum}
@findex make-enum
Let's look at the enumeration example now.

@cartouche
@verbatim
(defun make-enum (&rest keys
		  &key short-name long-name description
		       argument-name argument-type
		       enum env-var fallback-value default-value
		       nullablep)
  "Make a new enum option.
- SHORT-NAME is the option's short name (without the dash).
  It defaults to nil.
- LONG-NAME is the option's long name (without the double-dash).
  It defaults to nil.
- DESCRIPTION is the option's description appearing in help strings.
  It defaults to nil.
- ARGUMENT-NAME is the option's argument name appearing in help strings.
- ARGUMENT-TYPE is one of :required, :mandatory or :optional (:required and
  :mandatory are synonyms).
  It defaults to :optional.
- ENUM is the set of possible values.
- ENV-VAR is the option's associated environment variable.
  It defaults to nil.
- FALLBACK-VALUE is the option's fallback value (for missing optional
  arguments), if any.
- DEFAULT-VALUE is the option's default value, if any.
- NULLABLEP indicates whether this option accepts nil as a value."
  (declare (ignore short-name long-name description
		  argument-name argument-type
		  enum env-var fallback-value default-value
		  nullablep))
  (apply #'make-instance 'enum keys))
@end verbatim
@end cartouche

Woah, what a mouthful for a single line of code@dots{} Yeah, I'm a
maniac and I like redundancy. I always restate all the available keys
explicitely, and everything again in the docstring so that all the
interesting information is directly available (I might change my mind as
I grow older though).


@c --------------
@c Extension Tips
@c --------------
@node Extension Tips, , New Option Types, Extending Clon
@section Extension Tips
So that's it. Now you know how to extend @clon{} with your own option
types. Here is some piece of advice that you might find useful in the
process.

@menu
* Incremental Option Types::    Doing without defoption
* Lisp Option Abuse::           Thinking in end-user terms
@end menu

@node Incremental Option Types, Lisp Option Abuse, Extension Tips, Extension Tips
@subsection Incremental Option Types
@findex defoption
@code{defoption} is a nice convenience macro for new (valued) option
types that you define ``from scratch'' (we have even seen a more
contrived example where an additional super-class is used). However, you
might not want to use it all the time. For example, if one of the
built-in options is almost what you need, you can perfectly subclass it
instead of using @code{defoption}, and only change what's needed, as
long as you follow the 3 other steps correctly. After all, it's Lisp.
Lisp is a world of mess@t{^D^D^D^D}freedom.

@node Lisp Option Abuse, , Incremental Option Types, Extension Tips
@subsection Lisp Option Abuse
@cindex Lisp Options
@ocindex{lispobj}
@voindex{lispobj}
@vopindex{lispobj, type specifier}
Along with the same lines, you may find that the @code{lispobj} type is
all you need in many situations. Let's take an example. Suppose you want
to implement a @code{--stars} option to assign a rank to a movie, from 0
to 5. The lazy approach is to simply create a @code{lispobj} option with
a @code{:typespec} (type specifier) of @code{(integer 0 5)} and you're
done.

But now, remember that the end-user of your application is probably not
a Lisper (in fact, I would hope that @clon{} contributes to increasing
the number of standalone @cl{} applications out there@dots{}). What do
you think would be her reaction, if, after providing a bogus value to
the @code{--stars} option, she get the following error message:

@verbatim
 Option 'stars': invalid argument "6".
Argument "6" must evaluate to (integer 0 5).
@end verbatim

or worse, a @code{"Cannot parse argument"} error message because of a
typo?

Not very friendly, right? In other words, you need to think in terms of
what the end-user of your application will expect. In that particular
situation, you might want to subclass @code{lispobj} only to provide
friendlier error messages.



@c ====================================================================
@c Advanced Usage
@c ====================================================================
@node Advanced Usage, Conclusion, Extending Clon, Top
@chapter Advanced Usage

This chapter contains information about different features that are
present in @clon{} because of design decisions, but that I expect to be
used only rarely, if at all.

@menu
* Not Using the Command-Line::  But any list of strings instead
* Using Multiple Contexts::     The current one, and the others
* Programmatic Help Strings::   Beyond the --help option
* Version Numbering::           In case you need to conditionalize
@end menu


@c --------------------------
@c Not Using the Command-Line
@c --------------------------
@node Not Using the Command-Line, Using Multiple Contexts, Advanced Usage, Advanced Usage
@section Not Using the Command-Line

In @ref{Context Creation}, we saw that when you create a context, you
create an association between a specific execution of the program and
the synopsis. In that particular instance of the application, the
@cmdline{} must comply with the synopsis definition. It turns out,
however that the @cmdline{} doesn't need to be the actual program's
@cmdline{}, as the user typed it. Any list of strings can act as a
@cmdline{}.

@fiaindex{make-context, :cmdline}
The function @code{make-context} has a @code{:cmdline} key that allows
you to provide any list of strings that will act as the @cmdline{}. Of
course, the default is to use the actual program's one.


@c -----------------------
@c Using Multiple Contexts
@c -----------------------
@node Using Multiple Contexts, Programmatic Help Strings, Not Using the Command-Line, Advanced Usage
@section Using Multiple Contexts

Did you notice that after creating a context, there is actually never
any explicit reference to it anymore? So where is the magick? In fact,
there's no magick at all involved.

@vindex *current-context*
@fiaindex{make-context, :make-current}
@clon{} has a global variable named @code{*current-context*} which holds
the@dots{} current context, yeah. When you create a context with
@code{make-context}, it is automatically made current, unless you use
the @code{:make-current} initarg with a value of @code{nil}.

@cindex Runtime Phase
@findex getopt
@findex getopt-cmdline
@findex multiple-value-getopt-cmdline
@findex do-cmdline-options
@findex help
The whole runtime phase API of @clon{} uses a context implicitely. This
involves @code{getopt}, @code{getopt-cmdline},
@code{multiple-value-getopt-cmdline}, @code{do-cmdline-options} and
@code{help}. As a consequence, it is possible to use @clon{} with
multiple contexts at the same time. There are in fact two ways to
achieve this.

@enumerate
@item
@vindex *current-context*
At any time in your program, you may change the value of
@code{*current-context*}. All subsequent calls to the runtime phase API
will hence use this other context.
@item
@fkindex{getopt, :context}
@fkindex{getopt-cmdline, :context}
@fkindex{help, :context}
@foindex{multiple-value-getopt-cmdline, :context}
@foindex{do-cmdline-options, :context}
If you prefer to use another context only temporarily, you can use the
@code{context} key instead. The whole runtime phase API of @clon{}
understands it. For the functions @code{getopt}, @code{getopt-cmdline}
and @code{help}, it's just another key in addition to those we've
already seen. For the macros @code{multiple-value-getopt-cmdline} and
@code{do-cmdline-options}, the key belongs to the first (list) argument,
like this:

@verbatim
(multiple-value-getopt-cmdline (option name value :context ctx) ...)
(do-cmdline-options (option name value :context ctx) ...)
@end verbatim
@end enumerate


@c -------------------------
@c Programmatic Help Strings
@c -------------------------
@node Programmatic Help Strings, Version Numbering, Using Multiple Contexts, Advanced Usage
@section Programmatic Help Strings

@findex help
@cindex Help String
@cindex Themes
@cindex Themes, standard, @t{refcard}
@cindex Standard Themes, @t{refcard}
So far, we've seen how to use the @code{help} function to implement a
typical @code{--help} option. This is mostly intended for the end-user.
There are also times when this function could be useful to @emph{you},
the application developer. For instance, one could imagine that part of
the compilation phase would involve generating the help string in order
to include it in the manual. Another idea would be that @samp{make
install} creates a @file{REFCARD} file in
@file{/usr/local/share/doc/my-app/} which contains the help string
formatted with the @code{refcard} theme, @etc{}.

@bioindex{theme}
@cindex CLON_THEME
@cindex Environment Variables, CLON_THEME
@bioindex{search-path}
@cindex CLON_SEARCH_PATH
@cindex Environment Variables, CLON_SEARCH_PATH
@bioindex{line-width}
@cindex CLON_LINE_WIDTH
@cindex Environment Variables, CLON_LINE_WIDTH
@bioindex{highlight}
@cindex CLON_HIGHLIGHT
@cindex Environment Variables, CLON_HIGHLIGHT
In such situations, calling the @code{help} function might not be
directly associated with an end-user level option, or at least not
@code{--help}, and you might not want to honor the end-user level
settings for theme, search path, line-width, or highlighting either
(remember that these settings might come from the environment variables
associated with @option{--clon-theme}, @option{--clon-search-path},
@option{--clon-line-width} and @option{--clon-highlight}).

@fkindex{help, :theme}
@fkindex{help, :search-path}
@fkindex{help, :line-width}
@fkindex{help, :highlight}
Because of this, the @code{help} function provides additional keys that
allow you to override those settings (they are in fact stored in the
context object). The keys in question are: @code{:theme},
@code{:search-path}, @code{:line-width} and @code{:highlight}.

@fkindex{help, :output-stream}
@vindex *standard-output*
In addition to that, there is an @code{:output-stream} key which
defaults to @code{*standard-output*} which you could use for instance to
write directly to a file. Note that there is no end-user level access to
this parameter.



@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering, , Programmatic Help Strings, Advanced Usage
@section Version Numbering

@bioindex{version}
As @clon{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library. While the
end-user of your application has limited means to access the current
version number of @clon{} (see @enduserref{Clonification} and the
built-in option @code{--clon-version}), you, the application programmer
and @clon{} user, have a finer grained access to it.

The first thing you can do to access the current version number of
@clon{} is use the @code{version} function (this is in fact the function
bound to the @code{--clon-version} option).

@defun version &optional (TYPE :number)
Return the current version number of @clon{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

A @clon{} version is characterized by 4 elements as described below.
@itemize
@item
@vindex +release-major-level+
A major version number stored in the constant
@code{+release-major-level+}.
@item
@vindex +release-minor-level+
A minor version number, stored in the constant
@code{+release-minor-level+}.
@item
@vindex +release-status+
A release status stored in the constant @code{+release-status+}. The
status of a release can be @code{:alpha}, @code{:beta}, @code{:pre} or
@code{:patchlevel}. These are in effect 4 levels of expected stability,
@code{:pre} meaning pre-release and @code{:patchlevel} corresponding to
a stable version of the library.
@item
@vindex +release-status-level+
A status-specific version number stored in the constant
@code{+release-status-level+}. Status levels start at 1 for unstable
versions (@eg{} beta 1, beta 2 @etc{}), but start at 0 for stable
releases (@eg{} 2.4.0, 2.4.1 @etc{}).
@end itemize

@vindex +release-name+
In addition to that, each version of @clon{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in teh
constant @code{+release-name+}. The chosen theme for the 1.x series is
``Great Jazz Sax Players''.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major . 10000 + minor .
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and pre status are ignored in version numbers (this is
as if the corresponding status level was considered to be always 0).
Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2pre1. Remember that alpha, beta or pre levels start
at 1. Patchlevels for stable releases start at 0 but 0 is ignored in the
output. So for instance, version 4.3.2 will appear as-is, while version
1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Bill Evans", 2.5 beta 8 "Scott
Henderson", 4.2 pre 1 "Herbie Hancock" or 4.3.2 "Chick Corea". As for
the short version, a patchlevel of 0 is ignored in the output: 1.3 "Bill
Evans".
@end itemize



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Quick Start Program, Advanced Usage, Top
@chapter Conclusion

So that's it I guess. You know all about @clon{} now. The next step is
to actually use it to clonify your favorite application, write new
applications using it and contaminate the world with standalone @cl{}
programs, featuring unprecedented @cmdline{} power and thrill-a-minute
option hacking.

Now, go Luke. The Attack of the @clon{} is ready to begin.



@c ====================================================================
@c Quick Start Program
@c ====================================================================
@node Quick Start Program, API Quick Reference, Conclusion, Top
@appendix Quick Start Program

@cartouche
@verbatim
(in-package :cl-user)

(require :asdf)
(asdf:operate 'asdf:load-op :com.dvlsoft.clon)
(use-package :com.dvlsoft.clon)

(defvar *synopsis*
  (defsynopsis (:postfix "FILES...")
    (text :contents "A very short program.")
    (group (:header "Immediate exit options:")
      (flag :short-name "h" :long-name "help"
	    :description "Print this help and exit.")
      (flag :short-name "v" :long-name "version"
	    :description "Print version number and exit."))))

(defun main ()
  "Entry point for our standalone application."
  (make-context :synopsis *synopsis*)
  (when (getopt :short-name "h")
    (help)
    (quit))
  (do-cmdline-options (option name value)
    (print (list option name value)))
  (terpri)
  (quit))

(save-lisp-and-die "test"
  :toplevel #'main :executable t :save-runtime-options t)
@end verbatim
@end cartouche



@c ====================================================================
@c Indexes
@c ====================================================================
@node API Quick Reference, Indexes, Quick Start Program, Top
@appendix API Quick Reference

@menu
* Initialization Phase API::    Synopsis, items and context creation
* Runtime Phase API::           Option retrieval and help formatting
* Extension API::               New option types
* Versioning API::              Release identification
@end menu


@c ------------------------
@c Initialization Phase API
@c ------------------------
@node Initialization Phase API, Runtime Phase API, API Quick Reference, API Quick Reference
@section Initialization Phase API

@defun make-text &key CONTENTS
@fiaindex{make-text, :contents}
@defunx make-@var{OPTION} :INITARG INITVAL@dots{}
@findex make-flag
@findex make-stropt
@findex make-lispobj
@findex make-enum
@findex make-path
@findex make-switch
@findex make-xswitch
@defunx make-group &key HEADER ITEM
@fiaindex{make-group, :header}
@fiaindex{make-group, :item}
@defunx make-synopsis &key POSTFIX ITEM
@fiaindex{make-synopsis, :postfix}
@fiaindex{make-synopsis, :item}
@xref{Constructors}.
@end defun

@defmac defgroup (&rest KEYS) &body FORMS
@foindex{defgroup, :header}
@xref{Group Definition}.
@end defmac

@defmac defsynopsis (&rest KEYS) &body FORMS
@foindex{defsynopsis, :postfix}
@fiindex{defsynopsis, text}
@fiindex{defsynopsis, options}
@fiindex{defsynopsis, group}
@xref{Synopsis Definition}.
@end defmac

@defun make-context &key SYNOPSIS ERROR-HANDLER GETOPT-ERROR-HANDLER @
CMDLINE (MAKE-CURRENT t)
@fiaindex{make-context, :synopsis}
@fiaindex{make-context, :error-handler}
@fiaindex{make-context, :getopt-error-handler}
@fiaindex{make-context, :cmdline}
@fiaindex{make-context, :make-current}
@xref{Context Creation}, @ref{Not Using the Command-Line} and @ref{Using
Multiple Contexts}.
@end defun

@defopt *current-context*
@xref{Using Multiple Contexts}.
@end defopt



@c -----------------
@c Runtime Phase API
@c -----------------
@node Runtime Phase API, Extension API, Initialization Phase API, API Quick Reference
@section Runtime Phase API

@defun getopt &key (CONTEXT *current-context*) SHORT-NAME LONG-NAME @
OPTION (ERROR-HANDLER (getopt-error-handler context))
@fkindex{getopt, :context}
@fkindex{getopt, :short-name}
@fkindex{getopt, :long-name}
@fkindex{getopt, :option}
@fkindex{getopt, :error-handler}
@vindex *current-context*
See @ref{Explicit Retrieval} and @ref{Using Multiple Contexts}.
@end defun

@defun getopt-cmdline &key (CONTEXT *current-context*)
@fkindex{getopt-cmdline, :context}
@vindex *current-context*
See @ref{Sequential Retrieval} and @ref{Using Multiple Contexts}.
@end defun

@defmac multiple-value-getopt-cmdline (OPTION NAME VALUE &key CONTEXT) @
&body BODY
@defmacx do-cmdline-options (OPTION NAME VALUE &key CONTEXT) @
&body BODY
@foindex{multiple-value-getopt-cmdline, :context}
@foindex{do-cmdline-options, :context}
See @ref{Sequential Retrieval} and @ref{Using Multiple Contexts}.
@end defmac

@defun help &key (CONTEXT *current-context*) @
(ITEM (synopsis context)) @
(OUTPUT-STREAM *standard-output*) @
(SEARCH-PATH (search-path context)) @
(THEME (theme context)) @
(LINE-WIDTH (line-width context)) @
(HIGHLIGHT (highlight context)))
@fkindex{help, :context}
@fkindex{help, :item}
@fkindex{help, :output-stream}
@fkindex{help, :theme}
@fkindex{help, :search-path}
@fkindex{help, :line-width}
@fkindex{help, :highlight}
@vindex *current-context*
@vindex *standard-output*
@xref{Help}, @ref{Using Multiple Contexts} and @ref{Programmatic Help
Strings}.
@end defun


@c -------------
@c Extension API
@c -------------
@node Extension API, Versioning API, Runtime Phase API, API Quick Reference
@section Extension API

@defmac defoption CLASS SUPERCLASSES SLOTS &rest OPTIONS
@pxref{New Option Classes}
@end defmac

@deffn {Generic Function} check-value OPTION VALUE
@xref{Value Check Protocol}.
@end deffn

@deftp {Error Condition} option-error OPTION
@deftpx {Error Condition} invalid-value VALUE COMMENT
@xref{Value Check Protocol}.
@end deftp

@deffn {Generic Function} convert OPTION ARGUMENT
@xref{Conversion Protocol}.
@end deffn

@deftp {Error Condition} invalid-argument ARGUMENT COMMENT
@xref{Conversion Protocol}.
@end deftp


@c --------------
@c Versioning API
@c --------------
@node Versioning API, , Extension API, API Quick Reference
@section Versioning API

@defun version &optional (TYPE :number)
@xref{Version Numbering}.
@end defun

@defvr Constant +release-major-level+
@defvrx Constant +release-minor-level+
@defvrx Constant +release-status+
@defvrx Constant +release-status-level+
@defvrx Constant +release-name+
@xref{Version Numbering}.
@end defvr



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , API Quick Reference, Top
@appendix Indexes

@menu
* Concept Index::       Well, the concept index
* Function Index::      Well, the function index
* Variable Index::      Well, the variable index
* Data Type Index::     Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index, , Variable Index, Indexes
@section Data Types
@printindex tp


@bye

@c  LocalWords:  Clon clon cmdline Clonification tty emph CmdLine clonified SGR
@c  LocalWords:  clonfiscated clonistified clonificated clonificationated samp
@c  LocalWords:  cindex subsubsection pxref Didier Nuker postfix Runtime cth
@c  LocalWords:  cartouche toplevel prepended IEC

@c user.texi ends here
