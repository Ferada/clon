\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2010 Didier Verna

@c Author:        Didier Verna <didier@lrde.epita.fr>
@c Maintainer:    Didier Verna <didier@lrde.epita.fr>
@c Created:       Fri Jul  2 02:24:49 2010
@c Last Revision: Fri Jul  2 02:24:55 2010

@c This file is part of Clon.

@c Clon is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License version 3,
@c as published by the Free Software Foundation.

@c Clon is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


@c Commentary:

@c Contents management by FCM version 0.1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-user.info
@settitle The Clon User Manual
@afourpaper
@c %**end of header


@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0
@set COPYRIGHT_DATE 2010
@setchapternewpage odd
@setcontentsaftertitlepage
@documentdescription
This is the Clon User Manual for Clon version @value{VERSION}: it
explains how to use Clon in your application.
@end documentdescription


@c ====================================================================
@c New Commands
@c ====================================================================
@macro clon
@t{Clon}
@end macro

@macro cl
Common Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro


@c The following 3 macros are here to circumvent the info filenames
@c changes, when referencing the end-user manual:

@macro pxenduserref{node}
@ifinfo
@pxref{\node\, , , clon-enduser, The Clon End-User Manual}
@end ifinfo
@ifnotinfo
@pxref{\node\, , , enduser, The Clon End-User Manual}
@end ifnotinfo
@end macro

@macro xenduserref{node}
@ifinfo
@xref{\node\, , , clon-enduser, The Clon End-User Manual}
@end ifinfo
@ifnotinfo
@xref{\node\, , , enduser, The Clon End-User Manual}
@end ifnotinfo
@end macro

@macro enduserref{node}
@ifinfo
@ref{\node\, , , clon-enduser, The Clon End-User Manual}
@end ifinfo
@ifnotinfo
@ref{\node\, , , enduser, The Clon End-User Manual}
@end ifnotinfo
@end macro


@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon User: (clon-user). The Clon User Manual.
@end direntry


@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon User Manual
@subtitle The @CmdLine{} Option Nuker, Version @value{VERSION}
@vskip 2cm
@image{clon,16cm}
@author Didier Verna <@email{didier@@lrde.epita.fr}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon User Manual

This is the @clon{} User Manual for @clon{} version @value{VERSION}:
it explains how to use @clon{} in your application.

@menu
* Copying::             The GNU General Public License
* Introduction::        What Clon is all about
* Quick Start::         For the brave and the impatient
* Using Clon::          Clonificating your application
* Extending Clon::      Creating your own option types
* Conclusion::          That's all folks
* Quick Start Program:: The complete listing
* Indexes::             Concept, Function and Variable
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
@clon{} is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 3,
as published by the Software Foundation.

@clon{} is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Quick Start, Copying, Top
@chapter Introduction

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables, fallback or default values. @clon{} comes with a
set of extensible option types (switches, paths, strings @etc{}).
@clon{} also provides automatic generation and formatting of help
strings, with support for highlighting on @tty{}'s through ISO/IEC 6429
SGR. This formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Option Nuker'' or ``The @cl{} Option Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This manual is for the @clon{} @emph{user}, that is, the developer of a
@cl{} application who wants to use @clon{} for @cmdline{} option
management@footnote{An application using @clon{} for its @cmdline{}
option management is said to be @emph{clonified}. It is also possible to
say @emph{clonfiscated}. However, we advise against using
@emph{clonistified}. The term @emph{clonificated} is also considered bad
style, and the use of @emph{clonificationated} is strictly prohibited.}.
As opposed to the user of the @emph{library}, the user of an
@emph{application} powered by @clon{} is called an @emph{end-user}.
@clon{} provides both a user manual (this one) and an end-user manual
(@pxenduserref{Top}). Everybody should read the end-user manual first.

@ref{Quick Start} provides a very short example in order to give an
overview of what's coming next. @ref{Using Clon} explains in detail how
to clonify your application, and @ref{Extending Clon} describe how to
extend @clon{} with your own option types.



@c ====================================================================
@c Quick Start
@c ====================================================================
@node Quick Start, Using Clon, Introduction, Top
@chapter Quick Start
In this chapter, we quickly build a very short program to get you
started. We assume that you have properly installed @clon{} for ASDF.
Since several bits are compiler-specific, we also assume that SBCL is
used in this example. If you want to try this program for real, the full
listing is available for cut'n paste in @ref{Quick Start Program}. For a
slightly longer example, have a look at the @t{demo} program provided in
the distribution.

Let's put us in the @cl{} user package, and load @clon{} first. @clon{}
lives in a package named @samp{com.dvlsoft.clon}. The @t{demo} program
from the distribution shows how to create a nickname if you find this
too long, or if you don't want to @t{use-package} it.

@cartouche
@verbatim
(in-package :cl-user)

(require :asdf)
(asdf:operate 'asdf:load-op :com.dvlsoft.clon)
(use-package :com.dvlsoft.clon)
@end verbatim
@end cartouche

@cindex Synopsis, definition
@findex defsynopsis
The next thing you want to do is to create a set of options, groups or
texts that your application will recognize and/or display in its help
string. The structure of your @cmdline{} is known to @clon{} as the
@dfn{synopsis}. In order to create it, use the macro @code{defsynopsis}.

@cartouche
@verbatim
(defvar *synopsis*
  (defsynopsis (:postfix "FILES...")
    (text :contents "A very short program.")
    (group (:header "Immediate exit options:")
      (flag :short-name "h" :long-name "help"
	    :description "Print this help and exit.")
      (flag :short-name "v" :long-name "version"
	    :description "Print version number and exit."))))
@end verbatim
@end cartouche

Note that the synopsis has a double role: it not only serves to define
the options recognized by your application, but also the order in which
every element appears in the help string. In that particular example, we
define a line of text and a group with a header and two flags.

@cindex Context, creation
@findex make-context
Now, we are going to define a function @code{main} for our standalone
application. The first thing that we need to do is create a
@dfn{context}. A context is an object that @clon{} uses to store various
things, including some state related to the parsing of the @cmdline{}.
You create a context with the function @code{make-context}. Our context
needs to be associated with the synopsis we created earlier.

@cartouche
@verbatim
(defun main ()
  "Entry point for our standalone application."
  (make-context :synopsis *synopsis*)
@end verbatim
@end cartouche

@cindex Retrieval, explicit
@cindex Options, retrieval, explicit
@findex getopt
@cindex Help String, display
@findex help
At that point, @clon{} is ready to retrieve the options you want from
the @cmdline{}. Let's first see if the user has used the option
@option{-h}, and give him the help string. Option retrieval is done with
the function @code{getopt}, and automatic help string output with the
function @code{help}. Note that what we do here is @emph{not} process
the @cmdline{} in sequence, but look directly for a specific option by
name.

@cartouche
@verbatim
  (when (getopt :short-name "h")
    (help)
    (quit))
@end verbatim
@end cartouche

@cindex Retrieval, sequential
@cindex Options, retrieval, sequential
@findex do-cmdline-options
And now, we are going to retrieve the other options and simply print
them. This time however, we process the @cmdline{} sequentially. This is
done with the @code{do-cmdline-options} macro. We also close the
@code{main} function.

@cartouche
@verbatim
  (do-cmdline-options (option name value)
    (print (list option name value)))
  (terpri)
  (quit))
@end verbatim
@end cartouche

Finally, time to save the Lisp image.

@cartouche
@verbatim
(save-lisp-and-die "test"
  :toplevel #'main :executable t :save-runtime-options t)
@end verbatim
@end cartouche

We're now ready to compile this industrial-scale application and deliver
it to the world:

@verbatim
CC=gcc sbcl --script test.lisp
@end verbatim

and voila!



@c ====================================================================
@c Using Clon
@c ====================================================================
@node Using Clon, Extending Clon, Quick Start, Top
@chapter Using Clon

Using @clon{} in your application involves three steps. In the first
step, you create a @dfn{synopsis}, which is a description of your
application's @cmdline{}. In the second step, you create a
@dfn{context}, which associates the synopsis with this specific
execution of the program. In the third step finally, you retrieve the
options values. Steps one and two form the @dfn{initialization phase} of
@clon{}, while step 3 is called the @dfn{runtime phase}.

@menu
* Synopsis Definition:: Describing your command-line
* Context Creation::    Instantiating your command-line
* Option Retrieval::    Getting the options values
@end menu


@c -------------------
@c Synopsis Definition
@c -------------------
@node Synopsis Definition, Context Creation, Using Clon, Using Clon
@section Synopsis Definition
@cindex Initialization Phase
@cindex Phase, initialization
@cindex Synopsis
@cindex Help String

Step one of the @clon{} initialization phase consists in defining a
@dfn{synopsis}. A synopsis is essentially a description of your
application's @cmdline{}: it describes what are the available options,
whether your application has a postfix @etc{} The synopsis, however,
plays a second role: it also describes the contents of your
application's help string. When you create a synopsis, you describe the
@cmdline{} and the help string at the same time.

@menu
* Synopsis Items::              Defsynopsis and its contents
* Built-In Option Types::       The exhaustive list
@end menu

@node Synopsis Items, Built-In Option Types, Synopsis Definition, Synopsis Definition
@subsection Synopsis Items
@cindex Synopsis, definition
Look again at the synopsis definition provided in @ref{Quick Start}. You
define a synopsis with the @code{defsynopsis} macro.
@defmac defsynopsis (@var{OPTIONS}@dots{}) @var{ITEMS}@dots{}
Define a new synopsis. @var{OPTIONS} are key/value pairs. @var{ITEMS}
is a list of either text, group, or option descriptions.

@cindex Postfix
@cindex Synopsis, postfix
@findex defsynopsis, @r{options}, :postfix
The first argument to @code{defsynopsis} is a list of key/value pairs.
Currently, the only available key is @code{:postfix}. Its value is a
string which will appear at the end of the synopsis line in the help
string. When you provide a postfix, you also implicitely tell @clon{}
that your application accepts non-option arguments at the end of the
@cmdline{}. See @enduserref{Option Separator} for more information on
the behavior of @clon{} with respect to postfixes.

The remainder of the arguments to @code{defsynopsis} are text, group or
options descriptions.
@end defmac

We now examine the syntax for each one of them.
@menu
* Text::        Adding arbitrary text
* Options::     Adding options
* Groups::      Adding groups
@end menu

@node Text, Options, Synopsis Items, Synopsis Items
@subsubsection Text
@cindex Text, in synopsis
@cindex Synopsis, text
@findex defsynopsis, @r{items}, text
In order to add arbitrary text to your help string, use the following
form:

@verbatim
(text :contents "Blah blah.")
@end verbatim

Try to make proper sentences when adding arbitrary text. You can use
explicit newline characters in your text if you really want to go next
line, but in general, you should not worry about the formatting because
the themes are here to do so. In particular, don't finish your text with
a newline. This would break potential theme specifications.

@node Options, Groups, Text, Synopsis Items
@subsubsection Options
@cindex Options, in synopsis
@cindex Synopsis, options
@findex defsynopsis, @r{items}, @r{options}
In order to add an option to your help string, you must provide a list
beginning with the option type and followed by key/value pairs
describing the option's properties. For instance, to add a flag with a
short name and a description, you could do this:

@verbatim
(flag :short-name "h" :description "Print this help and exit.")
@end verbatim

Option properties vary depending on the option type. The exact list of
available option types, and the corresponding properties are described
in @ref{Built-In Option Types}.

@node Groups, , Options, Synopsis Items
@subsubsection Groups
@cindex Groups, in synopsis
@cindex Synopsis, groups
@findex defsynopsis, @r{items}, group
In order to add a group to your help string, you must use the following
form:

@verbatim
(group (@var{OPTIONS}@dots{}) @var{ITEMS}@dots{})
@end verbatim

@cindex Groups, options, header
The group's options are key/value pairs. Currently, the only available
option is @code{:header}. The corresponding value must be a string which
will be displayed above the group's contents in the help string. The
same formatting recommendations as for arbitrary text apply
(@pxref{Text}).

@cindex Text, in groups
@cindex Groups, items, text
@cindex Options, in groups
@cindex Groups, items, options
@cindex Groups, in groups
@cindex Groups, items, groups
The group's items are simply arbitrary text, option or sub-group
descriptions as we've just seen.


@node Built-In Option Types, , Synopsis Items, Synopsis Definition
@subsection Built-In Option Types
@cindex Built-In Option Types
@cindex Options, built-in types
@cindex Options, types, built-in
In this section, we will review all the built-in option types that
@clon{} provides, along with their corresponding properties. You can use
them directly in your synopsis description. For adding personal option
types to @clon{}, see @ref{Extending Clon}.

@menu
* Common Properties::                   For all options
* Flags::                               Built-in options without arguments
* Common Valued Option Properties::     For all valued options
* Built-In Valued Options::             Built-in options with arguments
@end menu

@node Common Properties, Flags, Built-In Option Types, Built-In Option Types
@subsubsection Common Properties
@cindex Options, common properties
@cindex Options, properties, common
All option types in @clon{}, including those you define yourself
(@pxref{Extending Clon}), have a set of basic, common properties. Here
is a list of them.

@table @code
@item :short-name
@cindex Options, common properties, short name
@cindex Options, properties, common, short name
The option's short name. A string or @code{nil}.
@item :long-name
@cindex Options, common properties, long name
@cindex Options, properties, common, long name
The option's long name. A string or @code{nil}.
@item :description
@cindex Options, common properties, description
@cindex Options, properties, common, description
The option's descriptive text. A string or @code{nil}. The same
formatting recommendations as for arbitrary text apply (@pxref{Text}).
@item :env-var
@cindex Options, common properties, environment variable
@cindex Options, properties, common, environment variable
The option's associated environment variable. A string or @code{nil}.
@end table

Note that an option is required to have at least one name (either short
or long). Non-@code{nil} but empty names are also prohibited, and of
course, a short name cannot begin with a dash (otherwise, it would be
mistaken for a long name, but did I really need to mention this?).

@node Flags, Common Valued Option Properties, Common Properties, Built-In Option Types
@subsubsection Flags
@cindex Built-In Option Types, @code{flag}
@cindex Options, built-in types, @code{flag}
@cindex Options, types, built-in, @code{flag}
In @clon{}, options that don't take any argument are of type
@code{flag}. These options don't provide additional properties on top of
the common set described in @ref{Common Properties}. All properties
default to @code{nil}.

@node Common Valued Option Properties, Built-In Valued Options, Flags, Built-In Option Types
@subsubsection Common Valued Option Properties
@cindex Valued Options
@cindex Options, valued
All non-flag options in @clon{} are said to be @dfn{valued}. All valued
options, including those you define yourself (@pxref{Extending Clon}),
share a set of additional properties. Here is a list of them.

@table @code
@item :argument-name
@cindex Valued Options, common properties, argument name
@cindex Valued Options, properties, common, argument name
@cindex Options, valued, common properties, argument name
@cindex Options, valued, properties, common, argument name
The name of the option's argument, as it appears in the help string. It
defaults to @code{"ARG"}, so that for instance, a @samp{name} option
would appear like this: @samp{--name=ARG}.
@item :argument-type
@cindex Valued Options, common properties, argument type
@cindex Valued Options, properties, common, argument type
@cindex Options, valued, common properties, argument type
@cindex Options, valued, properties, common, argument type
The status of the argument. Possible values are @code{:required} (the
default) and @code{:mandatory} which are synonyms, or @code{:optional}.
@item :default-value
@cindex Valued Options, common properties, default value
@cindex Valued Options, properties, common, default value
@cindex Options, valued, common properties, default value
@cindex Options, valued, properties, common, default value
@item :fallback-value
@cindex Valued Options, common properties, fallback value
@cindex Valued Options, properties, common, fallback value
@cindex Options, valued, common properties, fallback value
@cindex Options, valued, properties, common, fallback value
The option's default and fallback values. Remember that a fallback value
only makes sense when the argument is optional. Besides, also when the
argument is optional, you need to provide at least a fallback or a
default value (or both of course).
@item :nullablep
@cindex Valued Options, common properties, nullable
@cindex Valued Options, properties, common, nullable
@cindex Options, valued, common properties, nullable
@cindex Options, valued, properties, common, nullable
Whether the option accepts a null value. Default to @code{nil}. FIXME:
link explanation to the converter part in extending clon.
@end table

@node Built-In Valued Options, , Common Valued Option Properties, Built-In Option Types
@subsubsection Built-In Valued Options
@cindex Options, types, valued
@cindex Built-In Option Types, valued
@cindex Options, built-in types, valued
@cindex Options, types, built-in, valued
@clon{} currently defines 6 built-in valued option types. These option
types may change the default value for some common properties, and / or
provide additional properties of their own. All of this is described
below.

@table @code
@item stropt
@cindex Built-In Option Types, @code{stropt}
@cindex Options, built-in types, @code{stropt}
@cindex Options, types, built-in, @code{stropt}
@cindex Valued Options, common properties, argument name
@cindex Valued Options, properties, common, argument name
@cindex Options, valued, common properties, argument name
@cindex Options, valued, properties, common, argument name
This option type is for options taking strings as their argument. String
options don't provide any additional properties, but their default
argument name is changed from @code{"ARG"} to @code{"STR"}.
@item lispobj
@cindex Built-In Option Types, @code{lispobj}
@cindex Options, built-in types, @code{lispobj}
@cindex Options, types, built-in, @code{lispobj}
@cindex Valued Options, common properties, argument name
@cindex Valued Options, properties, common, argument name
@cindex Options, valued, common properties, argument name
@cindex Options, valued, properties, common, argument name
@cindex Valued Options, @code{lispobj}
@cindex Valued Options, @code{lispobj}, properties, type specifier
@cindex Options, valued, @code{lispobj}, properties, type specifier
This option type is for options taking any kind of Lisp object as their
argument. @code{lispobj} options change their default argument name from
@code{"ARG"} to @code{"OBJ"}. Also, they provide an additional property
called @code{:typespec} which must be a @cl{} type specifier that the
argument must satisfy. It defaults to @code{t}.
@item enum
@cindex Built-In Option Types, @code{enum}
@cindex Options, built-in types, @code{enum}
@cindex Options, types, built-in, @code{enum}
@cindex Valued Options, common properties, argument name
@cindex Valued Options, properties, common, argument name
@cindex Options, valued, common properties, argument name
@cindex Options, valued, properties, common, argument name
@cindex Valued Options, @code{enum}
@cindex Valued Options, @code{enum}, properties, enumeration
@cindex Options, valued, @code{enum}, properties, enumeration
@cindex Built-In Options, @code{--clon-version}
@cindex Options, built-in, @code{--clon-version}
This option type is for options taking values from an enumerated set.
@code{enum} options change their default argument name from @code{"ARG"}
to @code{"TYPE"}. Also, they provide an additional property called
@code{:enum} which must be a list of @cl{} keywords enumerating the
possible values. In fact, the values are not the keywords themselves,
but rather their corresponding symbol name. This means that an end-user
needs not be aware of the underlying implementation, and actually does
not use a colon when providing an argument. The end-user also has the
ability to abbreviate the possible values. Look at the
@code{--clon-version} built-in option for an example.
@item path
@cindex Built-In Option Types, @code{path}
@cindex Options, built-in types, @code{path}
@cindex Options, types, built-in, @code{path}
@cindex Valued Options, common properties, argument name
@cindex Valued Options, properties, common, argument name
@cindex Options, valued, common properties, argument name
@cindex Options, valued, properties, common, argument name
@cindex Valued Options, common properties, nullable
@cindex Valued Options, properties, common, nullable
@cindex Options, valued, common properties, nullable
@cindex Options, valued, properties, common, nullable
@cindex Valued Options, @code{path}
@cindex Valued Options, @code{path}, properties, path type
@cindex Options, valued, @code{path}, properties, path type
This option type is for options taking a colon-separated list of
pathnames as argument. @code{path} options change their default argument
name from @code{"ARG"} to @code{"PATH"} and their default nullable
property from @code{nil} to @code{t}. Also, they provide an additional
property called @code{:type} which specifies the kind of path which is
expected. Possible values are: @code{:file}, @code{:directory},
@code{:file-list}, @code{:diretory-list} or @code{nil} (meaning that
anything is allowed).
@item switch
@cindex Built-In Option Types, @code{switch}
@cindex Options, built-in types, @code{switch}
@cindex Options, types, built-in, @code{switch}
@cindex Valued Options, common properties, argument type
@cindex Valued Options, properties, common, argument type
@cindex Options, valued, common properties, argument type
@cindex Options, valued, properties, common, argument type
@cindex Valued Options, common properties, nullable
@cindex Valued Options, properties, common, nullable
@cindex Options, valued, common properties, nullable
@cindex Options, valued, properties, common, nullable
@cindex Valued Options, @code{switch}
@cindex Valued Options, @code{switch}, properties, argument style
@cindex Options, valued, @code{switch}, properties, argument style
This option type is for Boolean options. @code{switch} options change
their default nullable property from @code{nil} to @code{t}, and their
default argument type from required to optional. Also, instead of using
the @code{:argument-name} property, @code{switch} options provide a
property called @code{:argument-style}. Possible values are
@code{:yes/no} (the default), @code{:on/off}, @code{:true/false},
@code{:yup/nope}, @code{:yeah/nah}. Note that this property determines
the argument name @emph{only}. All possible switch arguments
(@pxenduserref{Switches}) are always availble to all switches.
@item xswitch
@cindex Built-In Option Types, @code{xswitch}
@cindex Options, built-in types, @code{xswitch}
@cindex Options, types, built-in, @code{xswitch}
@cindex Valued Options, common properties, argument type
@cindex Valued Options, properties, common, argument type
@cindex Options, valued, common properties, argument type
@cindex Options, valued, properties, common, argument type
@cindex Valued Options, common properties, nullable
@cindex Valued Options, properties, common, nullable
@cindex Options, valued, common properties, nullable
@cindex Options, valued, properties, common, nullable
@cindex Valued Options, @code{xswitch}
@cindex Valued Options, @code{xswitch}, properties, enumeration
@cindex Options, valued, @code{xswitch}, properties, enumeration
@cindex Built-In Options, @code{--clon-highlight}
@cindex Options, built-in, @code{--clon-highlight}
This option type stands for @dfn{extended} switch. Extended switches
result from the mating of a male switch and a female enumeration, or the
other way around (elementary decency prevents me from describing this
mating process in detail): their possible values are either Boolean or
from an @code{:enum} property as in the case of @code{enum} options.
@code{xswitch} options change their default nullable property from
@code{nil} to @code{t}, and their default argument type from required to
optional.
@end table



@c ----------------
@c Context Creation
@c ----------------
@node Context Creation, Option Retrieval, Synopsis Definition, Using Clon
@section Context Creation
@cindex Initialization Phase
@cindex Phase, initialization
@cindex Context

Step two of the @clon{} initialization phase consists in creating a
@dfn{context}. A context is an object representing a particular instance
of your program, for example (and most notably) with an actual
@cmdline{} as the user typed it.
@cindex Context, creation
@findex make-context
You create a context with the @code{make-context} function.

@defun make-context @var{OPTIONS}@dots{}
Create a new context. @var{OPTIONS} are key/value pairs. The following
keys are available.

@table @code
@item :synopsis
@findex make-context, @r{options}, :synopsis
Use this key to associate the context with a synopsis previously defined
by @code{defsynopsis} (@pxref{Synopsis Definition}).
@item :error-handler
@findex make-context, @r{options}, :error-handler
The behavior to adopt in case an error happens during the initialization
phase, when the @cmdline{} is parsed. This is where you get errors like
``unknown option'', ``invalid argument'' @etc{}). Possible values are
@code{:quit} and @code{:none}. When @code{:quit} and an error happens,
print the error and terminate the application (this is the default).
When @code{:none}, no error handler is installed, which means that the
behavior will depend on the underlying @cl{} implementation. For
instance, the debugger might be raised or a stack trace might be printed
(this is the case in SBCL with the @option{--script} option).
@item :getopt-error-handler
@findex make-context, @r{options}, :getopt-error-handler
The behavior to adopt in case an error happens when an option is
retrieved in any way (@pxref{Option Retrieval}). Since @cmdline{} errors
are throw at initialization time, the errors you can get here are
related to retrieval from the environment. Possible values are the same
as above, and the same comments apply as well.
@end table
@end defun


@c ----------------
@c Option Retrieval
@c ----------------
@node Option Retrieval, , Context Creation, Using Clon
@section Option Retrieval
@cindex Runtime Phase
@cindex Phase, runtime



@c ====================================================================
@c Extending Clon
@c ====================================================================
@node Extending Clon, Conclusion, Using Clon, Top
@chapter Extending Clon



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Quick Start Program, Extending Clon, Top
@chapter Conclusion
So that's it I guess. Enjoy using @clon{}.

Hmmm. What kind of conclusion was that@dots{}



@c ====================================================================
@c Quick Start Program
@c ====================================================================
@node Quick Start Program, Indexes, Conclusion, Top
@appendix Quick Start Program

@cartouche
@verbatim
(in-package :cl-user)

(require :asdf)
(asdf:operate 'asdf:load-op :com.dvlsoft.clon)
(use-package :com.dvlsoft.clon)

(defvar *synopsis*
  (defsynopsis (:postfix "FILES...")
    (text :contents "A very short program.")
    (group (:header "Immediate exit options:")
	   (flag :short-name "h" :long-name "help"
		 :description "Print this help and exit.")
	   (flag :short-name "v" :long-name "version"
		 :description "Print version number and exit."))))

(defun main ()
  "Entry point for our standalone application."
  (make-context :synopsis *synopsis*)
  (when (getopt :short-name "h")
    (help)
    (quit))
  (do-cmdline-options (option name value)
    (print (list option name value)))
  (terpri)
  (quit))

(save-lisp-and-die "test"
  :toplevel #'main :executable t :save-runtime-options t)
@end verbatim
@end cartouche



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Quick Start Program, Top
@appendix Indexes

@menu
* Concept Index::       Well, the concept index
* Function Index::      Well, the function index
* Variable Index::      Well, the variable index
@end menu

@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn


@c --------------
@c Variable Index
@c --------------
@node Variable Index, , Function Index, Indexes
@section Variables
@printindex vr


@bye

@c  LocalWords:  Clon clon cmdline Clonification tty emph CmdLine clonified SGR
@c  LocalWords:  clonfiscated clonistified clonificated clonificationated samp
@c  LocalWords:  cindex subsubsection pxref Didier Nuker postfix Runtime cth
@c  LocalWords:  cartouche toplevel prepended IEC

@c user.texi ends here
