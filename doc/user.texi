\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2010 Didier Verna

@c Author:        Didier Verna <didier@lrde.epita.fr>
@c Maintainer:    Didier Verna <didier@lrde.epita.fr>
@c Created:       Fri Jul  2 02:24:49 2010
@c Last Revision: Fri Jul  2 02:24:55 2010

@c This file is part of Clon.

@c Clon is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License version 3,
@c as published by the Free Software Foundation.

@c Clon is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


@c Commentary:

@c Contents management by FCM version 0.1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-user.info
@settitle The Clon User Manual
@afourpaper
@c %**end of header


@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0
@set COPYRIGHT_DATE 2010
@setchapternewpage odd
@setcontentsaftertitlepage
@documentdescription
This is the Clon User Manual for Clon version @value{VERSION}: it
explains how to use Clon in your application.
@end documentdescription


@c ====================================================================
@c New Commands
@c ====================================================================
@macro clon
@t{Clon}
@end macro

@macro cl
Common Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon: (clon-user). The User Manual.
@end direntry


@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon User Manual
@subtitle The @CmdLine{} Option Nuker, Version @value{VERSION}
@vskip 2cm
@image{clon,16cm}
@author Didier Verna <@email{didier@@lrde.epita.fr}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon User Manual

This is the @clon{} User Manual for @clon{} version @value{VERSION}:
it explains how to use @clon{} in your application.

@menu
* Copying::             The GNU General Public License
* Introduction::        What Clon is all about
* Quick Start::         For the brave and the impatient
* Using Clon::          Clonificating your application
* Extending Clon::      Creating your own option types
* Conclusion::          That's all folks
* Quick Start Program:: The complete listing
* Indexes::             Concept, Function and Variable
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
@clon{} is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 3,
as published by the Software Foundation.

@clon{} is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Quick Start, Copying, Top
@chapter Introduction

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables or default values. @clon{} comes with a set of
extensible option types (numbers, paths, strings @etc{}). @clon{} also
provides automatic generation and formatting of help strings, with
support for highlighting on @tty{}'s through ISO/IEC 6429 SGR. This
formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Option Nuker'' or ``The @cl{} Option Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This manual is for the @clon{} @emph{user}, that is, the developer of a
@cl{} application who wants to use @clon{} for @cmdline{} option
management@footnote{An application using @clon{} for its @cmdline{}
option management is said to be @emph{clonified}. It is also possible to
say @emph{clonfiscated}. However, we advise against using
@emph{clonistified}. The term @emph{clonificated} is also considered bad
style, and the use of @emph{clonificationated} is strictly prohibited.}.
As opposed to the user of the @emph{library}, the user of an
@emph{application} powered by @clon{} is called an @emph{end-user}.
@clon{} provides both a user manual (this one) and an end-user manual
(@pxref{Top, , , clon-end-user, The Clon End-User Manual}). Everybody
should read the end-user manual first.

@ref{Quick Start} provides a very short example in order to give an
overview of what's coming next. @ref{Using Clon} explains in detail how
to clonify your application, and @ref{Extending Clon} describe how to
extend @clon{} with your own option types.



@c ====================================================================
@c Quick Start
@c ====================================================================
@node Quick Start, Using Clon, Introduction, Top
@chapter Quick Start
In this chapter, we quickly build a very short program to get you
started. We assume that you have properly installed @clon{} for ASDF.
Since several bits are compiler-specific, we also assume that SBCL is
used in this example. If you want to try this program for real, the full
listing is available for cut'n paste in @ref{Quick Start Program}. For a
slightly longer example, have a look at the @t{demo} program provided in
the distribution.

Let's put us in the @cl{} user package, and load @clon{} first. @clon{}
lives in a package named @samp{com.dvlsoft.clon}. The @t{demo} program
from the distribution shows how to create a nickname if you find this
too long, or if you don't want to @t{use-package} it.

@cartouche
@verbatim
(in-package :cl-user)

(require :asdf)
(asdf:operate 'asdf:load-op :com.dvlsoft.clon)
(use-package :com.dvlsoft.clon)
@end verbatim
@end cartouche

@cindex Synopsis, definition
@findex defsynopsis
The next thing you want to do is to create a set of options, groups or
texts that your application will recognize and/or display in its help
string. The structure of your @cmdline{} is known to @clon{} as the
@dfn{synopsis}. In order to create it, use the macro
@code{defsynopsis}.
@cartouche
@verbatim
(defvar *synopsis*
  (defsynopsis (:postfix "FILES...")
    (text :contents "A very short program.")
    (group (:header "Immediate exit options:")
      (flag :short-name "h" :long-name "help"
            :description "Print this help and exit.")
      (flag :short-name "v" :long-name "version"
            :description "Print version number and exit."))))
@end verbatim
@end cartouche
Note that the synopsis has a double role: it not only serves to define
the options recognized by your application, but also the order in which
every element appears in the help string. In that particular example, we
define a line of text and a group with a header and two flags.

@cindex Context, creation
@findex make-context
Now, we are going to define a function @code{main} for our
standalone application. The first thing that we need to do is create a
@dfn{context}. A context is an object that @clon{} uses to store various
things, including some state related to the parsing of the @cmdline{}.
You create a context with the function @code{make-context}. Our
context needs to be associated with the synopsis we created earlier.
@cartouche
@verbatim
(defun main ()
  "Entry point for our standalone application."
  (make-context :synopsis *synopsis*)
@end verbatim
@end cartouche

@cindex Retrieval, by name
@findex getopt
@cindex Help String, display
@findex help
At that point, @clon{} is ready to retrieve the options you want from
the @cmdline{}. Let's first see if the user has used the option
@option{-h}, and give him the help string. Option retrieval is done with
the function @code{getopt}, and automatic help string output with
the function @code{help}. Note that what we do here is @emph{not}
process the @cmdline{} in sequence, but look directly for a specific
option by name.
@cartouche
@verbatim
  (when (getopt :short-name "h")
    (help)
    (quit))
@end verbatim
@end cartouche

@cindex Retrieval, by @cmdline{} order
@findex do-cmdline-options
And now, we are going to retrieve the other options and simply print
them. This time however, we process the @cmdline{} sequentially. This is
done with the @code{do-cmdline-options} macro. We also close the
@code{main} function.
@cartouche
@verbatim
  (do-cmdline-options (option name value)
    (print (list option name value)))
  (terpri)
  (quit))
@end verbatim
@end cartouche

Finally, time to save the Lisp image.
@cartouche
@verbatim
(save-lisp-and-die "test"
  :toplevel #'main :executable t :save-runtime-options t)
@end verbatim
@end cartouche

We're now ready to compile this industrial-scale application and deliver
it to the world:
@verbatim
CC=gcc sbcl --script test.lisp
@end verbatim
and voila!



@c ====================================================================
@c Using Clon
@c ====================================================================
@node Using Clon, Extending Clon, Quick Start, Top
@chapter Using Clon

Using @clon{} in your application involves three steps. In the first
step, you create a @dfn{synopsis}, which is a description of your
application's @cmdline{}. In the second step, you create a
@dfn{context}, which associates the synopsis with this specific
execution of the program. In the third step finally, you retrieve the
options values. Steps one and two form the @dfn{initialization phase} of
@clon{}, while step 3 is called the @dfn{runtime phase}.

@menu
* Synopsis Definition:: Describing your command-line
* Context Creation::    Instantiating your command-line
* Option Retrieval::    Getting the options values
@end menu


@c -------------------
@c Synopsis Definition
@c -------------------
@node Synopsis Definition, Context Creation, Using Clon, Using Clon
@section Synopsis Definition
@cindex Initialization Phase
@cindex Phase, initialization
@cindex Synopsis
@cindex Help String

A @dfn{synopsis} is essentially a description of your application's
@cmdline{}: it describes what are the available options, whether your
application has a postfix @etc{} The synopsis, however, plays a second
role: it also describes the contents of your application's help string.
When you create a synopsis, you describe the @cmdline{} and the help
string at the same time.

@cindex Synopsis, @t{defsynopsis}
@findex defsynopsis


@c ----------------
@c Context Creation
@c ----------------
@node Context Creation, Option Retrieval, Synopsis Definition, Using Clon
@section Context Creation
@cindex Initialization Phase
@cindex Phase, initialization
@cindex Context
@cindex Context, creation
@findex make-context


@c ----------------
@c Option Retrieval
@c ----------------
@node Option Retrieval, , Context Creation, Using Clon
@section Option Retrieval
@cindex Runtime Phase
@cindex Phase, runtime



@c ====================================================================
@c Extending Clon
@c ====================================================================
@node Extending Clon, Conclusion, Using Clon, Top
@chapter Extending Clon



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Quick Start Program, Extending Clon, Top
@chapter Conclusion
So that's it I guess. Enjoy using @clon{}.

Hmmm. What kind of conclusion was that@dots{}



@c ====================================================================
@c Quick Start Program
@c ====================================================================
@node Quick Start Program, Indexes, Conclusion, Top
@appendix Quick Start Program

@cartouche
@verbatim
(in-package :cl-user)

(require :asdf)
(asdf:operate 'asdf:load-op :com.dvlsoft.clon)
(use-package :com.dvlsoft.clon)

(defvar *synopsis*
  (defsynopsis (:postfix "FILES...")
    (text :contents "A very short program.")
    (group (:header "Immediate exit options:")
	   (flag :short-name "h" :long-name "help"
		 :description "Print this help and exit.")
	   (flag :short-name "v" :long-name "version"
		 :description "Print version number and exit."))))

(defun main ()
  "Entry point for our standalone application."
  (make-context :synopsis *synopsis*)
  (when (getopt :short-name "h")
    (help)
    (quit))
  (do-cmdline-options (option name value)
    (print (list option name value)))
  (terpri)
  (quit))

(save-lisp-and-die "test"
  :toplevel #'main :executable t :save-runtime-options t)
@end verbatim
@end cartouche



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Quick Start Program, Top
@appendix Indexes

@menu
* Concept Index::       Well, the concept index
* Function Index::      Well, the function index
* Variable Index::      Well, the variable index
@end menu

@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn


@c --------------
@c Variable Index
@c --------------
@node Variable Index, , Function Index, Indexes
@section Variables
@printindex vr


@bye

@c  LocalWords:  Clon clon cmdline Clonification tty emph CmdLine clonified SGR
@c  LocalWords:  clonfiscated clonistified clonificated clonificationated samp
@c  LocalWords:  cindex subsubsection pxref Didier Nuker postfix Runtime cth
@c  LocalWords:  cartouche toplevel prepended IEC

@c user.texi ends here
