\input texinfo

@c clon-enduser.texi --- The Clon end-user manual

@c Copyright (C) 2009 Didier Verna

@c Author:        Didier Verna <didier@lrde.epita.fr>
@c Maintainer:    Didier Verna <didier@lrde.epita.fr>
@c Created:       Tue Jun  2 18:29:49 2009
@c Last Revision: Thu Jul  9 18:32:14 2009

@c This file is part of Clon.

@c Clon is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License as published by
@c the Free Software Foundation; either version 2 of the License, or
@c (at your option) any later version.

@c Clon is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


@c Commentary:

@c Contents management by FCM version 0.1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-enduser.info
@settitle The Clon end-user manual
@c %**end of header


@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0
@set COPYRIGHT_DATE 2009
@setchapternewpage odd
@setcontentsaftertitlepage
@documentdescription
This is the Clon end-user manual for Clon version @value{VERSION}: it
describes the use of applications powered by Clon.
@end documentdescription


@c ====================================================================
@c New Commands
@c ====================================================================
@macro Clon
@t{Clon}
@end macro

@macro tty
@t{tty}
@end macro


@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon: (clon-enduser). The End User Manual.
@end direntry


@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon end-user manual
@subtitle Version @value{VERSION}
@author Didier Verna <@email{didier@@lrde.epita.fr}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon end-user manual

This is the @Clon{} end-user manual for @Clon{} version
@value{VERSION}: it describes the use of applications powered by
@Clon{}.

@menu
* Copying::                     The GNU General Public License
* Introduction::                What Clon is all about
* Clonification::               Determining whether a program is powered by Clon
* Command Line Options::        Making use of @Clon{}'s command-line features
* Output::                      Understanding and customizing @Clon{}'s output
* Concept Index::               Concept Index
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
@Clon{} is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 2, as published by
the Software Foundation.

@Clon{} is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Clonification, Copying, Top
@chapter Introduction

@Clon{} is a library for managing command-line options in standalone
Common Lisp applications. It provides a unified option syntax with both
short and long names, automatic completion of partial names and
automatic retrieval/conversion of option values from the command-line,
associated environment variables or default values. @Clon{} comes with a
set of extensible option types (numbers, paths, strings etc). @Clon{}
also provides automatic generation and formatting of help strings, with
support for highlighting on @tty{}'s through ISO/IEC 6429 SGR. This
formatting is customizable through ``themes''.

Depending on the target audience, @Clon{} stands for either ``The
Command Line Option Nuker'' or ``The Common Lisp Option Nuker''. @Clon{}
also has a recursive acronym: ``@Clon{} Likes Options Nuking'', and a
reverse one: ``Never Omit to Link with @Clon{}''. I think that should be
enough for now.

This manual is for the @Clon{} end-user, that is, the user of an
application powered by @Clon{}. It describes how to use the command-line
of clonified@footnote{An application using @Clon{} for its command-line
option management is said to be ``clonified''. It is also possible to
say ``clonfiscated''. However, we advise against using ``clonistified''. 
The term ``clonificated'' is also considered bad style, and the use of
``clonificationated'' is strictly prohibited.} applications and how to
customize @Clon{}'s output. Everybody should read this manual first. If
you want to use @Clon{} in one of your applications, then you are
considered a @Clon{} @emph{user}, as opposed to a @Clon{}
@emph{end-user}, and you should then read the corresponding manual
(@pxref{Top, , , clon-user, The Clon user manual, The Clon user manual}).



@c ====================================================================
@c Clonification
@c ====================================================================
@node Clonification, Command Line Options, Introduction, Top
@chapter Clonification

Before knowing how to handle clonified programs, you must ensure that
they are indeed @Clon{}-enabled. Perhaps the simplest way to do that is
to type @kbd{theprogram --clon-help} and see what happens. If you get an
error, then you're out of luck. Otherwise, you will get a list of
@Clon{}-specific options. Every clonified application has these options
built-in. We will describe most of them when appropriate in this manual,
but here's already the description for a couple of them (in addition to
@option{--clon-help} that we've just mentioned).

@itemize @bullet
@item @option{--clon-banner}

This option outputs a whole bunch of information, including the version
of @Clon{} the application is using, and @Clon{}-specific copyright
information.

@item @option{--clon-version}

This option outputs the version of @Clon{} the application is using. By
default (or by using it like this: @kbd{--clon-version=long}), this
information is provided in ``long'' form (release number, status and
name; just try it to see what gives). If you ask for
@kbd{--clon-version=short}, you'll get a more compact version
information, and if you try @kbd{--clon-version=number}, you will end up
with a purely numerical version number. For more information on @Clon{}
version numbering, @xref{Version Numbering, , , clon-user, The Clon user
manual, The Clon user manual}.
@end itemize 



@c ====================================================================
@c Command Line Options
@c ====================================================================
@node Command Line Options, Output, Clonification, Top
@chapter Command Line Options

When using a clonified application, you will probably encounter a couple
of familiar concepts, such as option names coming in short form
(@samp{-h}) or long form (@samp{--help}). @Clon{}, however, also comes
with a set a specific features such as packs or abbreviated calls that
you might want to become familiar with in order to use an application's
command-line to its full extent.

In this chapter, we will look at option syntax, how the command-line is
organized, and also how you can call options by abbreviated names.

@menu
* Option Syntax::               Different kinds of options
* Command Line Structure::      How the command-line is organized
* Abbreviation::                Abbreviating option names
@end menu


@c -------------
@c Option Syntax
@c -------------
@node Option Syntax, Command Line Structure, Command Line Options, Command Line Options
@section Option Syntax

@Clon{} offers a set of precise syntactic rules that every clonified
application follows implicitely, making them work in a homogeneous way. 
Although application programmers have the ability to extend @Clon{} by
defining their own option @emph{types}, even those new options obey the
same syntactic rules as the built-in ones.

@menu
* Short or Long Form::          How to avoid filling up your memory
* Environment::                 Environment variables associated with options
* Flags::                       Options that stand for themselves
* Valued Options::              Options that can take arguments
@end menu

@node Short or Long Form, Environment, Option Syntax, Option Syntax
@subsection Short or Long Form

An option can come with either a short name, a long name, or both. A
``short call'' (or ``minus call'') consists of a single dash followed by
the option's short name (for example @samp{-h}). A ``long call'', on the
contrary, consists of two dashes followed by the option's long name (for
example @samp{--help}).

Short names typically consist of a single character. They are concise
but more difficult to remember. Long names can be whole words, or even
word sequences. They are easier to remember but longer to type on the
command-line. That is the conventional usage of short and long names at
least.

You should be aware of the fact that in a clonified application, neither
short names nore long ones are restricted in length. In fact, it would
be perfectly possible to have an option with a short name longer than
the corresponding long one, although that would make little sense. The
only real difference is whether you use one or two dashes. Some other
differences also come into play for valued options (@pxref{Valued
Options}) though. Yes, life can be complicated sometimes@dots{}

@node Environment, Flags, Short or Long Form, Option Syntax
@subsection Environment

An application programmer can choose to associate an option with an
environment variable. When the application tries to retrieve the value
of an option and the option does not appear on the command-line, the
associated environment variable (if any) is tried instead. Normally,
such an association should be advertised in the application's help
string.

@node Flags, Valued Options, Environment, Option Syntax
@subsection Flags

Flags are the only options that never take an argument. They just stand
for themselves: either they are present on the command-line, or they are
not (as a matter of fact, that is a lie). A typical example of a flag
would be displayed like this in a standard help string (but
@pxref{Output}).
@example
  -h, --help        Print this help and exit.
@end example

Flags can still be associated with an environment variable however. For
such options, the presence of the environment variable in the
application's environment (regardless of its value, since flags don't
take any argument) will account for the presence of the flag on the
command-line (now, you should see where the lied was). Suppose for
instance that an application provides a @option{--ndebug} flag,
associated with the environment variable @env{NDEBUG}. Setting this
variable in the environment will make the application behave as if the
option was given explicitely on the command-line all the time.


@node Valued Options,  , Flags, Option Syntax
@subsection Valued Options

Apart from flags, clonified applications may provide ``valued options'',
that is, options taking an argument. These options are more complicated
to use than flags because a number of properties come into play: in
addition to short and/or long names and environment variable
association, a valued option's argument may be optional or mandatory, a
valued option may provide a default value and/or a fallback value (don't
worry, we'll get to that soon) and finally, there is also an additional
call syntax for some of them. If everything goes well, you're now
wondering whether you really want to use a command-line at all.

Because of this additional call syntax we just mentioned, valued options
can be classified in two main categories: ``standard'' ones, with short
and long call syntax, and ``switch based'' ones, with some more magic
involved@dots{}

@menu
* Standard Valued Options::     With short and long call syntax
* Switch Based Options::        With an additional call syntax
@end menu

@node Standard Valued Options, Switch Based Options, Valued Options, Valued Options
@subsubsection Standard Valued Options

As we said before, standard valued options may exist in short or long
form. When using the long form, the proper way of giving an argument to
an option is to append it after an equal sign, like this:
@samp{--color=black}. When using the short form, the proper way of
giving an argument to an option is to stick it right behind the option's
name, like this: @samp{-cblack}. That should sound familiar.

Now, the situation gets a bit more convoluted


@node Switch Based Options,  , Standard Valued Options, Valued Options
@subsubsection Switch Based Options

@c ----------------------
@c Command Line Structure
@c ----------------------
@node Command Line Structure, Abbreviation, Option Syntax, Command Line Options
@section Command Line Structure


@c ------------
@c Abbreviation
@c ------------
@node Abbreviation,  , Command Line Structure, Command Line Options
@section Abbreviation


@c ====================================================================
@c Output
@c ====================================================================
@node Output, Concept Index, Command Line Options, Top
@chapter Output


@c ====================================================================
@c Concept Index
@c ====================================================================
@node Concept Index,  , Output, Top
@unnumbered Concept Index

@printindex cp

@bye

@c clon-enduser.texi ends here
