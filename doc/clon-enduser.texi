\input texinfo

@c clon-enduser.texi --- End-user manual

@c Copyright (C) 2010 Didier Verna

@c Author:        Didier Verna <didier@lrde.epita.fr>
@c Maintainer:    Didier Verna <didier@lrde.epita.fr>
@c Created:       Tue Jun  2 18:29:49 2009
@c Last Revision: Sat Jun 12 18:04:25 2010

@c This file is part of Clon.

@c Clon is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License version 3,
@c as published by the Free Software Foundation.

@c Clon is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


@c Commentary:

@c Contents management by FCM version 0.1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-enduser.info
@settitle The Clon end-user manual
@afourpaper
@c %**end of header


@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0
@set COPYRIGHT_DATE 2010
@setchapternewpage odd
@setcontentsaftertitlepage
@documentdescription
This is the Clon end-user manual for Clon version @value{VERSION}: it
describes the use of applications powered by Clon.
@end documentdescription


@c ====================================================================
@c New Commands
@c ====================================================================
@macro clon
@t{Clon}
@end macro

@macro cl
Common Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro


@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon: (clon-enduser). The End User Manual.
@end direntry


@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon end-user manual
@subtitle The @CmdLine{} Option Nuker, Version @value{VERSION}
@vskip 2cm
@image{clon,16cm}
@author Didier Verna <@email{didier@@lrde.epita.fr}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon end-user manual

This is the @clon{} end-user manual for @clon{} version @value{VERSION}:
it describes the use of applications powered by @clon{}.

@menu
* Copying::             The GNU General Public License
* Introduction::        What Clon is all about
* Clonification::       Determining whether a program is powered by Clon
* The Command Line::    Making use of @clon{}'s @cmdline{} features
* Output::              Understanding and customizing @clon{}'s output
* Concept Index::       Concept Index
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
@clon{} is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 3,
as published by the Software Foundation.

@clon{} is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Clonification, Copying, Top
@chapter Introduction

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables or default values. @clon{} comes with a set of
extensible option types (numbers, paths, strings @etc{}). @clon{} also
provides automatic generation and formatting of help strings, with
support for highlighting on @tty{}'s through ISO/IEC 6429 SGR. This
formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Option Nuker'' or ``The @cl{} Option Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This manual is for the @clon{} @emph{end-user}, that is, the user of an
application powered by @clon{}. It describes how to use the @cmdline{}
of clonified@footnote{An application using @clon{} for its @cmdline{}
option management is said to be @emph{clonified}. It is also possible to
say @emph{clonfiscated}. However, we advise against using
@emph{clonistified}. The term @emph{clonificated} is also considered bad
style, and the use of @emph{clonificationated} is strictly prohibited.}
applications and how to customize @clon{}'s output. Everybody should
read this manual first. If you want to use @clon{} in one of your
applications, then you are considered a @clon{} @emph{user}, as opposed
to a @clon{} @emph{end-user}, and you should then read the corresponding
manual (@pxref{Top, , , clon-user, The Clon user manual, The Clon user
manual}).

@ref{Clonification} shows how to verify that an application is powered
by @clon{}. @ref{The Command Line} explains how to use the @cmdline{} of
a clonified application, and @ref{Output} describes how to customize the
output of @clon{}.



@c ====================================================================
@c Clonification
@c ====================================================================
@node Clonification, The Command Line, Introduction, Top
@chapter Clonification
@cindex @t{--clon-help}
@cindex @t{--clon-banner}
@cindex @t{--clon-version}
@cindex Built-in Options
@cindex Built-in Options, @t{--clon-help}
@cindex Built-in Options, @t{--clon-banner}
@cindex Built-in Options, @t{--clon-version}
@cindex Options, built-in
@cindex Options, built-in, @t{--clon-help}
@cindex Options, built-in, @t{--clon-banner}
@cindex Options, built-in, @t{--clon-version}

Given this wonderful standalone @cl{} application, how do I know if it
uses @clon{} for handing the @cmdline{}? Perhaps the simplest way to
know is to type
@example
program --clon-help
@end example
and see what happens. If you get an error, then you are out of luck.
Otherwise, you will get a list of @clon{}-specific options. Every
clonified application has these options built-in, and they are all
called @t{--clon-}@i{something}. We will describe most of them when
appropriate in this manual, but here's already the description for a
couple of them (in addition to @option{--clon-help} that we've just
mentioned).

@table @option
@item --clon-banner
When given this option, the application outputs a whole bunch of
information, including the version of @clon{} it is using, and
@clon{}-specific copyright information.

@item --clon-version
This option makes the application output the version of @clon{} it is
using. By default (or by using it like this:
@option{--clon-version=long}), this information is provided in
@emph{long} form (release number, status and name; just try it). If you
ask for @option{--clon-version=short}, you'll get a more compact version
information, and if you try @option{--clon-version=number}, you will end
up with a purely numerical version number. For more information on
@clon{} version numbering, @xref{Version Numbering, , , clon-user, The
Clon user manual, The Clon user manual}.
@end table



@c ====================================================================
@c The Command Line
@c ====================================================================
@node The Command Line, Output, Clonification, Top
@chapter The Command Line
@cindex Command-Line

@clon{} provides applications with usual @cmdline{} features such as
option names coming in short (@eg{} @samp{-h}) or long (@eg{}
@samp{--help}) form. @clon{} also comes with a set of more specific
features, such as @emph{packs} or abbreviated forms, that you might want
to become familiar with in order to use an application's @cmdline{} to
its full extent.

@menu
* Option Calls::        Different ways to specify options
* Option Packs::        Grouping option calls together
* Option Separator::    Telling @clon{} to mind it's own business
* Option Retrieval::    How @clon{} computes the value of an option
@end menu


@c -------------
@c Option Calls
@c -------------
@node Option Calls, Option Packs, The Command Line, The Command Line
@section Option Calls
@cindex Command-Line, options
@cindex Options, command-line

@clon{} offers a set of precise syntactic rules that every clonified
application follows implicitely, making them work in a homogeneous way.
Although application programmers have the ability to extend @clon{} by
defining their own option @emph{types}, even those new options obey the
same syntactic rules as the built-in ones.

@menu
* Option Names::        Long, short or abbreviated
* Option Arguments::    None, mandatory or optional
@end menu

@node Option Names, Option Arguments, Option Calls, Option Calls
@subsection Option Names
@cindex Options, names
An option can come with either a short name, a long name, or both. It is
also possible to abbreviate long names.

@menu
* Full Names::          Long or short
* Abbreviations::       Shorter long names
@end menu

@node Full Names, Abbreviations, Option Names, Option Names
@subsubsection Full Names
@cindex Long Form
@cindex Short Form
@cindex Command-Line, options, long form
@cindex Command-Line, options, short form
@cindex Options, names, full
@cindex Options, names, long
@cindex Options, names, short
@cindex Options, command-line, long form
@cindex Options, command-line, short form
To provide an option by short name, use a @emph{short form}: a single
dash followed by the option's short name (@eg{} @samp{-h}). To provide
an option by long name, use a @emph{long form}: two dashes followed by
the option's long name (@eg{} @samp{--help}).

Short names typically consist of a single character. They are concise
but more difficult to remember. Long names can be whole words, or even
word sequences (usually separated by dashes). They are easier to
remember but longer to type on the @cmdline{}.

You should be aware of the fact that in a clonified application, neither
short names nore long ones are restricted in length. In fact, it would
be perfectly possible to have an option's short name longer than the
corresponding long one, although that would make little sense. The only
real difference is whether you use one or two dashes. Some other
differences also come into play when an option expects an argument
(@pxref{Option Arguments}) though (it would be no fun otherwise).

@node Abbreviations, , Full Names, Option Names
@subsubsection Abbreviations
@cindex Abbreviated Form
@cindex Abbreviated Long Form
@cindex Long Form, abbreviated
@cindex Options, names, abbreviated
@cindex Options, names, long, abbreviated
@cindex Command-Line, options, abbreviated form
@cindex Command-Line, options, abbreviated long form
@cindex Command-Line, options, long form, abbreviated
@cindex Options, command-line, abbreviated form
@cindex Options, command-line, abbreviated long form
@cindex Options, command-line, long form, abbreviated
When calling an option by long form, it is possible to abbreviate its
name, at the risk of being ambiguous. An abbreviation is simply the
beginning of the option's name (for instance, @samp{--he} can stand for
@samp{--help}). In case of ambiguity, @clon{} always chooses the option
which is ``closest'' to the abbreviation (here, the ``distance'' between
an abbreviation and an option's name is the number of missing
characters).

@node Option Arguments, , Option Names, Option Calls
@subsection Option Arguments
@cindex Arguments
@cindex Options, arguments
In @clon{}, there are different kinds of options: in addition to having
a short and/or long name, an option may or may not take an argument. For
those taking one, the argument may be either mandatory or optional.
Then, there is also an additional, extended call syntax for some of
them. But then again, that is not the whole story about getting an
option's value (@pxref{Option Retrieval}). If everything goes well, you
are now wondering whether you really want to use a @cmdline{} at all.

@menu
* Flags::                       Options with no argument
* Valued Options::              Options with arguments
* Switches::                    Options with boolean arguments
@end menu

@node Flags, Valued Options, Option Arguments, Option Arguments
@subsubsection Flags
@cindex Flags
@cindex Options, types, flags
First of all, some options don't take an argument at all. In the @clon{}
jargon, these options are called @emph{flags}. Flags just stand for
themselves: either they are present on the @cmdline{}, or they are not
(as a matter of fact, this is a lie). A typical example of a flag would
be displayed like this in a standard help string (but @pxref{Output}):
@example
  -h, --help        Print this help and exit.
@end example

@node Valued Options, Switches, Flags, Option Arguments
@subsubsection Valued Options
@cindex Valued Options
@cindex Options, types, valued
@cindex Sticky Arguments
@cindex Arguments, sticky
@cindex Options, arguments, sticky
@cindex Mandatory Arguments
@cindex Arguments, mandatory
@cindex Options, arguments, mandatory
@cindex Optional Arguments
@cindex Arguments, optional
@cindex Options, arguments, optional
Options taking an argument are said to be @emph{valued}. In @clon{}, a
valued option's argument can be either mandatory or optional. We know
that valued options, just like flags, may be provided in short or long
form. When using the long form, the proper way of providing an argument
is to append it after an @samp{=} sign, like this:
@samp{--phone=01020304}. When using the short form, the proper way of
providing an argument is to stick it right behind the option's name,
like this: @samp{-p01020304}. In both long and short form, we call these
arguments ``sticky''. All this should look familiar.

@cindex Separated Arguments
@cindex Arguments, separated
@cindex Options, arguments, separated
When the option's argument is mandatory, you also have the ability to
provide it in the next @cmdline{} item instead of sticking it to the
option's name. These arguments are said to be ``separated''. Back to the
previous example, this means that you can also say @samp{--phone
01020304} or @samp{-p 01020304}. Keep in mind that this is not possible
when the argument is optional (in the general case, it is not possible
to decide whether the next @cmdline{} item is an option's argument, a
new option or something else).

@cindex Arguments, looking like options
@cindex Options, as argument to other options
@cindex Options, arguments, looking like options
There is also another case where you can't use this alternate syntax,
even when the argument is mandatory: that is when the argument itself
looks like an option. @clon{} will think it is, and consequently will
also think that the previous one lacks its mandatory argument.

The phone example above would look like this in a standard help string
(but @pxref{Output}):
@example
  -p, --phone=NUM    Set phone number to NUM.
@end example

And here is an example illustrating a typical output when the argument
is optional:
@example
  -f, --fax[=NUM]    Set fax number to NUM, or same as phone.
@end example

@node Switches, , Valued Options, Option Arguments
@subsubsection Switches
@cindex Switches
@cindex Options, types, switches
For those of you who are not satisfied with short and long forms,
@clon{} provides a specific option type for boolean values, along with
an additional call syntax. These options are called @emph{switches}.

Just like any other kind of valued option, a switch can have a short
and/or a long name, and its argment may be mandatory or optional.
However, the possible arguments for a switch are restricted to true or
false. In fact, you can freely use @samp{yes}, @samp{on}, @samp{true},
@samp{yup}, @samp{yeah} and @samp{no}, @samp{off}, @samp{false},
@samp{nope}, @samp{nah} respectively.@footnote{If you want more, a very
modest additional fee will be charged.}

@cindex Negated Form
@cindex Negated Short Form
@cindex Short Form, negated
@cindex Options, command-line, negated form
@cindex Options, command-line, negated short form
@cindex Options, command-line, short form, negated
@cindex Command-Line, options, negated form
@cindex Command-Line, options, negated short form
@cindex Command-Line, options, short form, negated
In addition to the standard short and long forms, a switch can be
provided in @emph{negated form}, that is, by appending its short name
behind a @samp{+} character. This form never takes any argument and
always means false (turn the switch off, if you prefer).

Although an application might do something different, the intended usage
for switches is to take an optional argument that defaults to true. A
typical example would look like this in a standard help string (but
@pxref{Output}):
@example
  -(+)d, --debug[=yes/no]    Whether to enable debugging.
@end example

Given such an option, you can turn debugging on by saying just @samp{-d}
or @samp{--debug} (but you can also provide an explicit argument like
this: @samp{-dyes} or that: @samp{--debug=yes}). Similarly, to turn
debugging off, use @samp{+d} or @samp{--debug=no}.

One last word about switches: @clon{} lets application developers create
new options based on (but not limited to) switches. These options
typically accept boolean arguments as well as some other value(s). As
soon as an option is switch-based (and has a short name), the negated
form becomes automatically available, and this should be advertised in
the application's help string.


@c ------------
@c Option Packs
@c ------------
@node Option Packs,  Option Separator, Option Calls, The Command Line
@section Option Packs

In addition to using options individually (@pxref{Option Calls}),
@clon{} offers the possibility to group option calls together under some
circumstances. This feature is know as option @emph{packs}. @clon{}
offers two kinds of packs.

@menu
* Short Packs::         Grouping short forms together
* Negated Packs::       Grouping negated forms together
@end menu

@node Short Packs, Negated Packs, Option Packs, Option Packs
@subsection Short Packs
A short pack allows you to group multiple short forms in a single
@cmdline{} item. For instance, instead of calling your program like
this: @samp{program -c -u -p}, you can directly use: @samp{program
-cup}.

A short pack can only contain options the short names of which are
exactly one character long. Also, it should be obvious that you cannot
provide an argument to an option in a pack. There is one exception
however: it @emph{is} possible to provide an argument to the @emph{last}
option in the pack. If provided, this argument must be located in the
next @cmdline{} item. It cannot be sticked to the option, so this means
in particular that this option's argument is mandatory (@pxref{Valued
Options}).

Beware that using short packs comes at the risk of ambiguity. When
@clon{} parses a @cmdline{} item beginning with only one dash, it tries
to detect options first, options with a sticky argument next, and then
short packs. For that reason, you cannot possibly start a pack with a
valued option. Indeed, suppose that the option @samp{-c} takes an
argument. What you @emph{think} is a short pack (@samp{-cup}) will in
fact be interpreted as the option @samp{-c} with a sticky (and maybe
invalid) argument @samp{up}. On the other hand, if the option @samp{-u}
is only a flag (@pxref{Flags}), then you can safely pack your options in
a different order, like this: @samp{-ucp}.

A single @cmdline{} may contain as many short packs as you like, and
they can also be intermixed with regular option calls.

@node Negated Packs, , Short Packs, Option Packs
@subsection Negated Packs
In a very similar way, a negated pack allows you to group multiple
negated forms in a single @cmdline{} item. As such, this feature only
applies to switches or switch-based options (@pxref{Switches}). For
instance, instead of calling your program like this: @samp{program +c +u
+p}, you can directly use: @samp{program +cup}.

A negated pack can only contain options the short names of which are
exactly one character long. Also, remember that negated forms never take
any argument.

Beware that using negated packs comes at the risk of ambiguity (although
much less than with short packs). When @clon{} parses a @cmdline{} item
beginning with a @samp{+}, it tries to detect options first, and then
negated packs. For that reason, the order in which you specify the
options in the pack is important. Indeed, suppose that your application
has a @samp{+cup} switch (this would be a very bad idea, but
still@dots{}). If you want to provide the same pack as above, then you
need to modify the options order, like this: @samp{+ucp}.

A single @cmdline{} may contain as many negated packs as you like, and
they can also be intermixed with regular option calls or short packs.


@c ----------------
@c Option Separator
@c ----------------
@node Option Separator, Option Retrieval, Option Packs, The Command Line
@section Option Separator

@clon{} separates the @cmdline{} in two parts. The left part contains
option calls and packs while the right part contains the rest. The right
part is also called the @emph{postfix}).

You can force this distinction by using the special construct @samp{--}
on the @cmdline{}. Everything that follows it will be completely ignored
by @clon{} (not necessarily by the application itself though).

In the case you don't split your @cmdline{} explicitely, @clon{} does
this for you automatically by noticing where the last option (or its
potential argument) stands. The behavior is different from that of
explicit splitting in one regard however: if the application is not
expecting any postfix and there's an implicit one, then @clon{} will
throw an error at your face.

One final note on @cmdline{} separation: in the case an application's
postfix is supposed to contain something looking like an option (perhaps
real options to pass on to another program), you @strong{need} an
explicit separator. Otherwise, @clon{} will be confused: it could for
instance wrongly detect unknown options, junk on the @cmdline{} @etc{}

You don't want to confuse @clon{}. @clon{} is nasty when it is scared.



@c ----------------
@c Option Retrieval
@c ----------------
@node Option Retrieval, , Option Separator, The Command Line
@section Option Retrieval

When an application requests the value for a specific option, @clon{}
first looks at the @cmdline{}, from left to right, and stops at the
first match. Please note that the match in question may be a regular
option call or a pack, depending on what appears first in the
@cmdline{}. There is no concept of priority amongst option forms.

It is possible to provide several calls to the same option on a single
@cmdline{}. Some applications may take advantage of this: every
consecutive request for an option's value will use the next match on the
@cmdline{} until there is none left.

The @cmdline{}, however is not the only place where @clon{} looks for
option values. Some options may be associated with an environment
variable and may also provide a default value. All of this should
normally be advertised in the application's help string
(@pxref{Output}).

When @clon{} attempts to retrieve a value for a particular option, it
always does so in a specific order: first, the @cmdline{} is searched.
Next, an environment variable is tried (if appropriate), and finally,
the option's default value is used (if any).



@c ====================================================================
@c Output
@c ====================================================================
@node Output, Concept Index, The Command Line, Top
@chapter Output


@c ====================================================================
@c Concept Index
@c ====================================================================
@node Concept Index,  , Output, Top
@unnumbered Concept Index

@printindex cp

@bye

@c clon-enduser.texi ends here
