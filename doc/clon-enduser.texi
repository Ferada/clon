\input texinfo

@c clon-enduser.texi --- End-user manual

@c Copyright (C) 2010 Didier Verna

@c Author:        Didier Verna <didier@lrde.epita.fr>
@c Maintainer:    Didier Verna <didier@lrde.epita.fr>
@c Created:       Tue Jun  2 18:29:49 2009
@c Last Revision: Sat Jun 12 18:04:25 2010

@c This file is part of Clon.

@c Clon is free software; you can redistribute it and/or modify
@c it under the terms of the GNU General Public License version 3,
@c as published by the Free Software Foundation.

@c Clon is distributed in the hope that it will be useful,
@c but WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.

@c You should have received a copy of the GNU General Public License
@c along with this program; if not, write to the Free Software
@c Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


@c Commentary:

@c Contents management by FCM version 0.1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename clon-enduser.info
@settitle The Clon End-User Manual
@afourpaper
@c %**end of header


@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0
@set COPYRIGHT_DATE 2010
@setchapternewpage odd
@setcontentsaftertitlepage
@documentdescription
This is the Clon end-user manual for Clon version @value{VERSION}: it
describes the use of applications powered by Clon.
@end documentdescription


@c ====================================================================
@c New Commands
@c ====================================================================
@macro clon
@t{Clon}
@end macro

@macro cl
Common Lisp
@end macro

@macro tty
@t{tty}
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro cmdline
command-line
@end macro

@macro CmdLine
Command-Line
@end macro


@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* Clon: (clon-enduser). The End-User Manual.
@end direntry


@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Clon End-User Manual
@subtitle The @CmdLine{} Option Nuker, Version @value{VERSION}
@vskip 2cm
@image{clon,16cm}
@author Didier Verna <@email{didier@@lrde.epita.fr}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Clon end-user manual

This is the @clon{} end-user manual for @clon{} version @value{VERSION}:
it describes the use of applications powered by @clon{}.

@menu
* Copying::             The GNU General Public License
* Introduction::        What Clon is all about
* Clonification::       Determining whether a program is powered by Clon
* The Command Line::    Making use of @clon{}'s @cmdline{} features
* Output::              Understanding and customizing @clon{}'s output
* Concept Index::       Concept Index
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying

@quotation
@clon{} is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License version 3,
as published by the Software Foundation.

@clon{} is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Mass Ave, Cambridge, MA 02139, USA.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Clonification, Copying, Top
@chapter Introduction

@clon{} is a library for managing @cmdline{} options in standalone @cl{}
applications. It provides a unified option syntax with both short and
long names, automatic completion of partial names and automatic
retrieval/conversion of option arguments from the @cmdline{}, associated
environment variables or default values. @clon{} comes with a set of
extensible option types (numbers, paths, strings @etc{}). @clon{} also
provides automatic generation and formatting of help strings, with
support for highlighting on @tty{}'s through ISO/IEC 6429 SGR. This
formatting is customizable through @emph{themes}.

Depending on the target audience, @clon{} stands for either ``The
@CmdLine{} Option Nuker'' or ``The @cl{} Option Nuker''. @clon{} also
has a recursive acronym: ``@clon{} Likes Options Nuking'', and a reverse
one: ``Never Omit to Link with @clon{}''. Other possible expansions of
the acronym are still being investigated.

This manual is for the @clon{} @emph{end-user}, that is, the user of an
application powered by @clon{}. It describes how to use the @cmdline{}
of clonified@footnote{An application using @clon{} for its @cmdline{}
option management is said to be @emph{clonified}. It is also possible to
say @emph{clonfiscated}. However, we advise against using
@emph{clonistified}. The term @emph{clonificated} is also considered bad
style, and the use of @emph{clonificationated} is strictly prohibited.}
applications and how to customize @clon{}'s output. Everybody should
read this manual first. If you want to use @clon{} in one of your
applications, then you are considered a @clon{} @emph{user}, as opposed
to a @clon{} @emph{end-user}, and you should then read the corresponding
manual (@pxref{Top, , , clon-user, The Clon user manual, The Clon user
manual}).

@ref{Clonification} shows how to verify that an application is powered
by @clon{}. @ref{The Command Line} explains how to use the @cmdline{} of
a clonified application, and @ref{Output} describes how to customize the
output of @clon{}.



@c ====================================================================
@c Clonification
@c ====================================================================
@node Clonification, The Command Line, Introduction, Top
@chapter Clonification
@cindex @t{--clon-help}
@cindex @t{--clon-banner}
@cindex @t{--clon-version}
@cindex Built-in Options
@cindex Built-in Options, @t{--clon-help}
@cindex Built-in Options, @t{--clon-banner}
@cindex Built-in Options, @t{--clon-version}
@cindex Options, built-in
@cindex Options, built-in, @t{--clon-help}
@cindex Options, built-in, @t{--clon-banner}
@cindex Options, built-in, @t{--clon-version}

Given this wonderful standalone @cl{} application, how do I know if it
uses @clon{} for handing the @cmdline{}? Perhaps the simplest way to
know is to type
@example
program --clon-help
@end example
and see what happens. If you get an error, then you are out of luck.
Otherwise, you will get a list of @clon{}-specific options. Every
clonified application has these options built-in, and they are all
called @t{--clon-}@i{something}. We will describe most of them when
appropriate in this manual, but here's already the description for a
couple of them (in addition to @option{--clon-help} that we've just
mentioned).

@table @option
@item --clon-banner
When given this option, the application outputs a whole bunch of
information, including the version of @clon{} it is using, and
@clon{}-specific copyright information.

@item --clon-version
This option makes the application output the version of @clon{} it is
using. By default (or by using it like this:
@option{--clon-version=long}), this information is provided in
@emph{long} form (release number, status and name; just try it). If you
ask for @option{--clon-version=short}, you'll get a more compact version
information, and if you try @option{--clon-version=number}, you will end
up with a purely numerical version number. For more information on
@clon{} version numbering, @xref{Version Numbering, , , clon-user, The
Clon user manual, The Clon user manual}.
@end table



@c ====================================================================
@c The Command Line
@c ====================================================================
@node The Command Line, Output, Clonification, Top
@chapter The Command Line
@cindex Command-Line

@clon{} provides applications with usual @cmdline{} features such as
option names coming in short (@eg{} @samp{-h}) or long (@eg{}
@samp{--help}) form. @clon{} also comes with a set of more specific
features, such as @emph{packs} or abbreviated forms, that you might want
to become familiar with in order to use an application's @cmdline{} to
its full extent.

@menu
* Option Calls::        Different ways to specify options
* Option Packs::        Grouping option calls together
* Option Separator::    Telling @clon{} to mind it's own business
* Option Retrieval::    How @clon{} computes the value of an option
@end menu


@c -------------
@c Option Calls
@c -------------
@node Option Calls, Option Packs, The Command Line, The Command Line
@section Option Calls
@cindex Command-Line, options
@cindex Options, command-line

@clon{} offers a set of precise syntactic rules that every clonified
application follows implicitly, making them work in a homogeneous way.
Although application programmers have the ability to extend @clon{} by
defining their own option @emph{types}, even those new options obey the
same syntactic rules as the built-in ones.

@menu
* Option Names::        Long, short or abbreviated
* Option Arguments::    None, mandatory or optional
@end menu

@node Option Names, Option Arguments, Option Calls, Option Calls
@subsection Option Names
@cindex Options, names
An option can come with either a short name, a long name, or both. It is
also possible to abbreviate long names.

@menu
* Full Names::          Long or short
* Abbreviations::       Shorter long names
@end menu

@node Full Names, Abbreviations, Option Names, Option Names
@subsubsection Full Names
@cindex Long Form
@cindex Short Form
@cindex Command-Line, options, long form
@cindex Command-Line, options, short form
@cindex Options, names, full
@cindex Options, names, long
@cindex Options, names, short
@cindex Options, command-line, long form
@cindex Options, command-line, short form
To provide an option by short name, use a @emph{short form}: a single
dash followed by the option's short name (@eg{} @samp{-h}). To provide
an option by long name, use a @emph{long form}: two dashes followed by
the option's long name (@eg{} @samp{--help}).

Short names typically consist of a single character. They are concise
but more difficult to remember. Long names can be whole words, or even
word sequences (usually separated by dashes). They are easier to
remember but longer to type on the @cmdline{}.

You should be aware of the fact that in a clonified application, neither
short names nor long ones are restricted in length. In fact, it would
be perfectly possible to have an option's short name longer than the
corresponding long one, although that would make little sense. The only
real difference is whether you use one or two dashes. Some other
differences also come into play when an option expects an argument
(@pxref{Option Arguments}) though (it would be no fun otherwise).

@node Abbreviations, , Full Names, Option Names
@subsubsection Abbreviations
@cindex Abbreviated Form
@cindex Abbreviated Long Form
@cindex Long Form, abbreviated
@cindex Options, names, abbreviated
@cindex Options, names, long, abbreviated
@cindex Command-Line, options, abbreviated form
@cindex Command-Line, options, abbreviated long form
@cindex Command-Line, options, long form, abbreviated
@cindex Options, command-line, abbreviated form
@cindex Options, command-line, abbreviated long form
@cindex Options, command-line, long form, abbreviated
When calling an option by long form, it is possible to abbreviate its
name, at the risk of being ambiguous. An abbreviation is simply the
beginning of the option's name (for instance, @samp{--he} can stand for
@samp{--help}). In case of ambiguity, @clon{} always chooses the option
which is ``closest'' to the abbreviation (here, the ``distance'' between
an abbreviation and an option's name is the number of missing
characters).

@node Option Arguments, , Option Names, Option Calls
@subsection Option Arguments
@cindex Arguments
@cindex Options, arguments
In @clon{}, there are different kinds of options: in addition to having
a short and/or long name, an option may or may not take an argument. For
those taking one, the argument may be either mandatory or optional.
Then, there is also an additional, extended call syntax for some of
them. But then again, that is not the whole story about getting an
option's value (@pxref{Option Retrieval}). If everything goes well, you
are now wondering whether you really want to use a @cmdline{} at all.

@menu
* Flags::                       Options with no argument
* Valued Options::              Options with arguments
* Switches::                    Options with Boolean arguments
@end menu

@node Flags, Valued Options, Option Arguments, Option Arguments
@subsubsection Flags
@cindex Flags
@cindex Options, types, flags
First of all, some options don't take an argument at all. In the @clon{}
jargon, these options are called @emph{flags}. Flags just stand for
themselves: either they are present on the @cmdline{}, or they are not
(as a matter of fact, this is a lie, @pxref{Option Retrieval}). A
typical example of a flag would be displayed like this in a standard
help string (but @pxref{Output}):
@example
  -h, --help        Print this help and exit.
@end example

@node Valued Options, Switches, Flags, Option Arguments
@subsubsection Valued Options
@cindex Valued Options
@cindex Options, types, valued
@cindex Values
@cindex Options, values
Options taking an argument are said to be @emph{valued}. We need a bit
of terminology here: and option's @emph{argument} is typically what you
provide on the @cmdline{} (or elsewhere, @pxref{Option Retrieval}).
Typically a string. An option's @emph{value} is what results from the
conversion of the option's argument to the proper type (the same string,
a number, whatever).

@cindex Sticky Arguments
@cindex Arguments, sticky
@cindex Options, arguments, sticky
@cindex Mandatory Arguments
@cindex Arguments, mandatory
@cindex Options, arguments, mandatory
@cindex Optional Arguments
@cindex Arguments, optional
@cindex Options, arguments, optional
In @clon{}, a valued option's argument can be either mandatory or
optional. We know that valued options, just like flags, may be provided
in short or long form. When using the long form, the proper way of
providing an argument is to append it after an @samp{=} sign, like this:
@samp{--phone=01020304}. When using the short form, the proper way of
providing an argument is to stick it right behind the option's name,
like this: @samp{-p01020304}. In both long and short form, we call these
arguments ``sticky''. All this should look familiar.

@cindex Separated Arguments
@cindex Arguments, separated
@cindex Options, arguments, separated
When the option's argument is mandatory, you also have the ability to
provide it in the next @cmdline{} item instead of sticking it to the
option's name. These arguments are said to be ``separated''. Back to the
previous example, this means that you can also say @samp{--phone
01020304} or @samp{-p 01020304}. Keep in mind that this is not possible
when the argument is optional (in the general case, it is not possible
to decide whether the next @cmdline{} item is an option's argument, a
new option or something else).

@cindex Arguments, looking like options
@cindex Options, as argument to other options
@cindex Options, arguments, looking like options
There is also another case where you can't use this alternate syntax,
even when the argument is mandatory: that is when the argument itself
looks like an option. @clon{} will think it is, and consequently will
also think that the previous one lacks its mandatory argument.

The phone example above would look like this in a standard help string
(but @pxref{Output}):
@example
  -p, --phone=NUM    Set phone number to NUM.
@end example

And here is an example illustrating a typical output when the argument
is optional:
@example
  -f, --fax[=NUM]    Set fax number to NUM, or same as phone.
@end example

@node Switches, , Valued Options, Option Arguments
@subsubsection Switches
@cindex Switches
@cindex Options, types, switches
For those of you who are not satisfied with short and long forms,
@clon{} provides a specific option type for Boolean values, along with
an additional call syntax. These options are called @emph{switches}.

Just like any other kind of valued option, a switch can have a short
and/or a long name, and its argument may be mandatory or optional.
However, the possible arguments for a switch are restricted to true or
false. In fact, you can freely use @samp{yes}, @samp{on}, @samp{true},
@samp{yup}, @samp{yeah} and @samp{no}, @samp{off}, @samp{false},
@samp{nope}, @samp{nah} respectively.@footnote{If you want more, a very
modest additional fee will be charged.}

@cindex Negated Form
@cindex Negated Short Form
@cindex Short Form, negated
@cindex Options, command-line, negated form
@cindex Options, command-line, negated short form
@cindex Options, command-line, short form, negated
@cindex Command-Line, options, negated form
@cindex Command-Line, options, negated short form
@cindex Command-Line, options, short form, negated
In addition to the standard short and long forms, a switch can be
provided in @emph{negated form}, that is, by appending its short name
behind a @samp{+} character. This form never takes any argument and
always means false (turn the switch off, if you prefer).

Although an application might do something different, the intended usage
for switches is to take an optional argument that defaults to true. A
typical example would look like this in a standard help string (but
@pxref{Output}):
@example
  -(+)d, --debug[=yes/no]    Whether to enable debugging.
@end example

Given such an option, you can turn debugging on by saying just @samp{-d}
or @samp{--debug} (but you can also provide an explicit argument like
this: @samp{-dyes} or that: @samp{--debug=yes}). Similarly, to turn
debugging off, use @samp{+d} or @samp{--debug=no}.

One last word about switches: @clon{} lets application developers create
new options based on (but not limited to) switches. These options
typically accept Boolean arguments as well as some other value(s). As
soon as an option is switch-based (and has a short name), the negated
form becomes automatically available, and this should be advertised in
the application's help string.


@c ------------
@c Option Packs
@c ------------
@node Option Packs,  Option Separator, Option Calls, The Command Line
@section Option Packs
@cindex Packs
@cindex Command-Line, packs
@cindex Options, command-line, packed

In addition to using options individually (@pxref{Option Calls}),
@clon{} offers the possibility to group option calls together under some
circumstances. This feature is know as option @emph{packs}. @clon{}
offers two kinds of packs.

@menu
* Short Packs::         Grouping short forms together
* Negated Packs::       Grouping negated forms together
@end menu

@node Short Packs, Negated Packs, Option Packs, Option Packs
@subsection Short Packs
@cindex Short packs
@cindex Packs, short
@cindex Command-Line, short packs
@cindex Command-Line, packs, short
A short pack allows you to group multiple short forms in a single
@cmdline{} item. For instance, instead of calling your program like
this: @samp{program -c -u -p}, you can directly use: @samp{program
-cup}.

@cindex Options, names, short, one character
A short pack can only contain options the short names of which are
exactly one character long. Also, it should be obvious that you cannot
provide an argument to an option in a pack. There is one exception
however: it @emph{is} possible to provide an argument to the @emph{last}
option in the pack. If provided, this argument must be located in the
next @cmdline{} item. It cannot be sticked to the option, so this means
in particular that this option's argument is mandatory (@pxref{Valued
Options}).

Beware that using short packs comes at the risk of ambiguity. When
@clon{} parses a @cmdline{} item beginning with only one dash, it tries
to detect options first, options with a sticky argument next, and then
short packs. For that reason, you cannot possibly start a pack with a
valued option. Indeed, suppose that the option @samp{-c} takes an
argument. What you @emph{think} is a short pack (@samp{-cup}) will in
fact be interpreted as the option @samp{-c} with a sticky (and maybe
invalid) argument @samp{up}. On the other hand, if the option @samp{-u}
is only a flag (@pxref{Flags}), then you can safely pack your options in
a different order, like this: @samp{-ucp}.

A single @cmdline{} may contain as many short packs as you like, and
they can also be intermixed with regular option calls.

@node Negated Packs, , Short Packs, Option Packs
@subsection Negated Packs
@cindex Negated packs
@cindex Negated Short Packs
@cindex Negated packs, short
@cindex Packs, negated
@cindex Packs, short, negated
@cindex Command-Line, negated packs
@cindex Command-Line, negated short packs
@cindex Command-Line, short packs, negated
@cindex Command-Line, packs, negated
@cindex Command-Line, packs, short, negated
In a very similar way, a negated pack allows you to group multiple
negated forms in a single @cmdline{} item. As such, this feature only
applies to switches or switch-based options (@pxref{Switches}). For
instance, instead of calling your program like this: @samp{program +c +u
+p}, you can directly use: @samp{program +cup}.

@cindex Options, names, short, one character
A negated pack can only contain options the short names of which are
exactly one character long. Also, remember that negated forms never take
any argument.

Beware that using negated packs comes at the risk of ambiguity (although
much less than with short packs). When @clon{} parses a @cmdline{} item
beginning with a @samp{+}, it tries to detect options first, and then
negated packs. For that reason, the order in which you specify the
options in the pack is important. Indeed, suppose that your application
has a @samp{+cup} switch (this would be a very bad idea, but
still@dots{}). If you want to provide the same pack as above, then you
need to modify the options order, like this: @samp{+ucp}.

A single @cmdline{} may contain as many negated packs as you like, and
they can also be intermixed with regular option calls or short packs.


@c ----------------
@c Option Separator
@c ----------------
@node Option Separator, Option Retrieval, Option Packs, The Command Line
@section Option Separator
@cindex Separator
@cindex Command-Line, separator
@cindex Postfix
@cindex Command-Line, postfix

@clon{} separates the @cmdline{} in two parts. The left part contains
option calls and packs while the right part contains the rest. The right
part is also called the @emph{postfix}).

@cindex Explicit separator
@cindex Separator, explicit
@cindex Command-Line, explicit separator
@cindex Command-Line, separator, explicit
You can force this distinction by using the special construct @samp{--}
on the @cmdline{}. Everything that follows it will be completely ignored
by @clon{} (not necessarily by the application itself though).

@cindex Implicit separator
@cindex Separator, implicit
@cindex Command-Line, implicit separator
@cindex Command-Line, separator, implicit
In the case you don't split your @cmdline{} explicitly, @clon{} does
this for you automatically by noticing where the last option (or its
potential argument) stands. The behavior is different from that of
explicit splitting in one regard however: if the application is not
expecting any postfix and there's an implicit one, then @clon{} will
throw an error at your face.

@cindex Postfix, options in
@cindex Options, in postfix
@cindex Command-Line, postfix, options in
@cindex Command-Line, options, in postfix
One final note on @cmdline{} separation: in the case an application's
postfix is supposed to contain something looking like an option (perhaps
real options to pass on to another program), you @strong{need} an
explicit separator. Otherwise, @clon{} will be confused: it could for
instance wrongly detect unknown options, junk on the @cmdline{} @etc{}

You don't want to confuse @clon{}. @clon{} is nasty when it is scared.



@c ----------------
@c Option Retrieval
@c ----------------
@node Option Retrieval, , Option Separator, The Command Line
@section Option Retrieval
@cindex Retrieval
@cindex Options, retrieval

@cindex Retrieval, from command-line
@cindex Command-Line, retrieval
@cindex Options, retrieval, from command-line
When an application wants to retrieve a specific option, @clon{} looks
at the @cmdline{}, from left to right, and stops at the first match.
Please note that the match in question may be a regular option call or a
pack, depending on what appears first on the @cmdline{}. There is no
concept of priority amongst option forms.

@cindex Options, multiple calls
Note that it is possible to provide several calls to the same option on
a single @cmdline{}. Some applications may take advantage of this: every
consecutive request for an option will use the next match on the
@cmdline{} until there is none left.

The @cmdline{} is not the only place where @clon{} looks for option
@emph{values} however. Other sources for option values are:
@emph{fallback} values, @emph{environment} variables and @emph{default}
values. The existence of a fallback value, environment variable or
default value should be advertised in the application's help string
(@pxref{Output}).


@itemize @bullet
@item
@cindex Fallback values
@cindex Values, fallback
@cindex Retrieval, from fallback value
@cindex Options, retrieval, from fallback value
Fallback values are used when an option exists on the @cmdline{} without
a corresponding argument (so this applies only to options taking
optional arguments).
@item
@cindex Environment variables
@cindex Retrieval, from environment
@cindex Options, retrieval, from environment
Applications may also associate an option with a specific environment
variable which contains a value for it.
@item
@cindex Default values
@cindex Values, default
@cindex Retrieval, from default value
@cindex Options, retrieval, from default value
Finally, default values are used for options not provided on the
@cmdline{}.
@end itemize

When @clon{} attempts to retrieve a value for a particular option, it
always does so in a specific order: first, the @cmdline{} is searched.
If an argument is present, it is used. Otherwise, a fallback value is
used (if any). Next, an environment variable is tried (when
appropriate), and finally, the option's default value is used (if any).

@cindex Flags
@cindex Options, types, flags
@cindex Environment variables
@cindex Retrieval, from environment
@cindex Options, retrieval, from environment
One last note: fallback or default values don't make any sense for
flags, but flags can still be associated with environment variables. In
such a case, the very @emph{existence} of the variable in the
environment, regardless of its value, stands for the presence of the
corresponding option on the @cmdline{}.

Now you need to get some rest.



@c ====================================================================
@c Output
@c ====================================================================
@node Output, Concept Index, The Command Line, Top
@chapter Output

In the previous chapter, we have seen how to make the best usage of a
clonified application's command-line. The second aspect we need to look
at is @clon{}'s output, typically what you get when you type
@command{program --help}. From an end-user perspective, one key feature
of @clon{} is that control on the formatting of the help strings is
given to @emph{you} instead of being the programmer's responsibility.
What this means is that @emph{you} get to choose the way you want help
strings to be formatted, and all of a sudden, every clonified
application you use will conform to your specifications.

@ref{Output Elements} surveys the different items composing a @clon{}
help string by looking at examples in a default setting. @ref{Theme
Mechanism} explains how to switch between predefined layouts and
@ref{Theme Creation} describes how to build your own layouts.

@menu
* Output Elements::     What appears in help strings
* Theme Mechanism::     Switching between available layouts
* Theme Creation::      Building your own layouts
@end menu

@c ---------------
@c Output Elements
@c ---------------
@node Output Elements, Theme Mechanism, Output, Output
@section Output Elements
Let's look at the output of @command{program --help} in a default
setting first:

@cartouche
@verbatim
Usage: program [-hdF] [+d] [OPTIONS] FILES...

A clonified program.

  -h, --help                  Print this help and exit.
Runtime options:
  -(+)d, --debug[=yes/no]     Turn debugging on or off.
                              Fallback: yes
                              Environment: DEBUG
                              Default: no
  --simulate=yes/no           Simulate only. Nothing will happen for real,
                              except for log messages.
User identification:
  -f, --first-name=STR        Set the user's first name to STR.
  -F, --family-name[=NAME]    Set the user's family name to NAME.
                              Fallback: unknown
@end verbatim
@end cartouche

@cindex Synopsis
@cindex Output, synopsis
@cindex Postfix
@cindex Short packs
@cindex Packs, short
@cindex Negated packs
@cindex Negated Short Packs
@cindex Negated packs, short
@cindex Packs, negated
@cindex Packs, short, negated
The first line of output is what's called the @emph{synopsis}. This
synopsis indicates that the program accepts a number of options and also
a postfix consisting of file names. The set of available options is not
detailed in the synopsis but for convenience, @clon{} shows the
available short and negated packs explicitly.

@cindex Text
@cindex Arbitrary Text
@cindex Text, arbitrary
The next non-empty line is just text. A clonified application is free to
put arbitrary text anywhere in its help string. This can be used to
describe what the application is about for instance.

@cindex Groups
@cindex Arbitrary Text, in groups
@cindex Text, in groups
@cindex Options, in groups
@cindex Groups, in groups
@cindex Groups, titles
Two other lines in the help string look like arbitrary text, but in fact
are not: ``Runtime options:'' and ``User identification:''. These are
not arbitrary text, but @emph{group titles}. A group is a way of putting
help string items together, for instance because they are related to the
same topic. A group has an optional title, and may contain options,
arbitrary text or even sub-groups.

@cindex Groups
@cindex Groups, built-in
@cindex @t{--clon-help}
@cindex Built-in Options
@cindex Built-in Options, @t{--clon-help}
@cindex Options, built-in
@cindex Options, built-in, @t{--clon-help}
In addition to displaying the full help string, a clonified application
may display a group's help string only (in such a case, you don't get to
see the synopsis). This is what happens when you type @command{program
--clon-help} for instance. @clon{}'s built-in options belong to a
reserved built-in group.

@cindex Flags
@cindex Options, types, flags
@cindex Valued Options
@cindex Options, types, valued
@cindex Switches
@cindex Options, types, switches
@cindex Long Form
@cindex Short Form
@cindex Command-Line, options, long form
@cindex Command-Line, options, short form
@cindex Negated Form
@cindex Negated Short Form
@cindex Short Form, negated
@cindex Options, command-line, negated form
@cindex Options, command-line, negated short form
@cindex Options, command-line, short form, negated
@cindex Command-Line, options, negated form
@cindex Command-Line, options, negated short form
@cindex Command-Line, options, short form, negated
Let's have a look at the options now. In the first column, you can see
that depending on the option, the long, short and negated forms are
advertised. Valued options also advertise their argument, enclosed in
square brackets when it is optional. In this example, @samp{-h} is a
flag, @samp{-d} and @samp{--simulate} are switches with different
settings, while @samp{-f} and @samp{-F} are standard valued options.

@cindex Options, description
@cindex @t{--clon-line-width}
@cindex Built-in Options
@cindex Built-in Options, @t{--clon-line-width}
@cindex Options, built-in
@cindex Options, built-in, @t{--clon-line-width}
@cindex CLON_LINE_WIDTH
@cindex Environment Variables, CLON_LINE_WIDTH
The second column of the help string provides each option's
@emph{description}. Descriptions can span across several lines, as in
the case of @samp{--simulate}. @clon{} takes care of properly aligning
all the material that needs to be displayed. The global width of the
output can be controlled by a built-in option, the description of which
speaks for itself:
@verbatim
  --clon-line-width=WIDTH     Set Clon's output line width.
                              If not given, the terminal size will be used when
                              possible. Otherwise, 80 columns will be assumed.
                              Environment: CLON_LINE_WIDTH
@end verbatim

@cindex Fallback values
@cindex Values, fallback
@cindex Environment Variables
@cindex Default values
@cindex Values, default
Finally, you can see that potential fallback values, environment
variables and default values are also advertised in that order, when
appropriate.



@c ---------------
@c Theme Mechanism
@c ---------------
@node Theme Mechanism, Theme Creation, Output Elements, Output
@section Theme Mechanism
@cindex Theme Mechanism

@cindex Themes
@cindex Themes, built-in, @t{raw}
@cindex Built-in themes
@cindex Built-in themes, @t{raw}
The output of @command{program --help} that we have seen in the previous
section corresponds to a default setting, but is really just one
possibility. As the user of a clonified application, you have the
ability to customize the appearance of @clon{}'s output. The way things
look is specified by so-called @emph{themes}. @clon{} has a theme named
@t{raw} which every clonified application has built-in.

@cindex Themes, files
@cindex Themes, files, @t{cth} extension
@cindex @t{cth} extension
@cindex File Extension
@cindex File Extension, @t{cth}
Other themes are stored in files the standard extension of which is
@samp{cth} (as in @b{C}lon @b{TH}eme). In fact, theme files can be named
as you like; this is just a convention.

@menu
* Standard Themes::     Some example themes are provided
* Search Path::         Where to find theme files
* Theme Selection::     How to select a theme
@end menu

@node Standard Themes, Search Path, Theme Mechanism, Theme Mechanism
@subsection Standard Themes
@cindex Themes, files, standard
@cindex Standard Themes
@cindex Standard Themes, files
@clon{} comes with several standard themes in files that can be used
as-is or serve as the basis for creating new ones (@pxref{Theme
Creation}). The list is given below.
@table @t
@item raw
@cindex Standard Themes, files, @file{raw.cth}
@cindex Themes, files, standard, @file{raw.cth}
Exactly the same as the built-in one, only copied into a theme file.
@item optlist
@cindex Standard Themes, files, @file{optlist.cth}
@cindex Themes, files, standard, @file{optlist.cth}
Displays only a list of available options, one per line, without any
description, group indication or arbitrary text. This can be used to
quickly remember the name or the syntax of an option.
@item refcard
@cindex Standard Themes, files, @file{refcard.cth}
@cindex Themes, files, standard, @file{refcard.cth}
Displays a very compact help string. The synopsis is there, so are the
group titles and arbitrary texts, but the options are displayed without
any description, and the lines are filled as much as possible. The
intent of this theme is to produce some sort of ``reference card'' that
could be printed.
@item roomy
@cindex Standard Themes, files, @file{roomy.cth}
@cindex Themes, files, standard, @file{roomy.cth}
Displays a full help string occupying more space than the @t{raw} theme.
Option descriptions don't start @emph{after} the option's name, but
@emph{under} it. As a result, they occupy more horizontal space. Also,
sub-groups are indented to the right.
@item christmas
@cindex Standard Themes, files, @file{christmas.cth}
@cindex Themes, files, standard, @file{christmas.cth}
This one is full of bells and whistles, which makes it essentially
unusable. It exists only to provide a concrete example of all the
available formatting and highlighting features of @clon{}. The
@t{christmas} theme is only available once a year, at exactly 23:59:59
on December the 24th.
@end table

@node Search Path, Theme Selection, Standard Themes, Theme Mechanism
@subsection Search Path
@cindex Search Path
@cindex Search Path, themes
@cindex Themes, search path
@clon{} maintains a search path for looking up files. Theme files are
supposed to be located in a @file{themes} subdirectory of every
directory in the search path. By default, the search path is as follows:
@itemize @w{}
@item
@t{~/.clon/}
@item
@t{~/Library/Application Support/Clon/} (Mac OSX only)
@item
@t{~/share/clon/}
@item
@t{/Library/Application Support/Clon/} (Mac OSX only)
@item
@t{/usr/local/share/clon/}
@item
@t{/usr/share/clon/}
@end itemize

@cindex @t{--clon-search-path}
@cindex Built-in Options, @t{--clon-search-path}
@cindex Options, built-in, @t{--clon-search-path}
@cindex CLON_SEARCH_PATH
@cindex Environment Variables, CLON_SEARCH_PATH
The search path can be modified with the @option{--clon-search-path}
built-in option or its accompanying @env{CLON_SEARCH_PATH} environment
variable. It takes a list of colon-separated directories as argument.
This argument is in fact optional. Not providing an argument is
equivalent to providing an empty one, which basically reduces the search
path to the application's current directory.


@node Theme Selection, , Search Path, Theme Mechanism
@subsection Theme Selection
@cindex @t{--clon-theme}
@cindex Built-in Options, @t{--clon-theme}
@cindex Options, built-in, @t{--clon-theme}
@cindex CLON_THEME
@cindex Environment Variables, CLON_THEME
In order to select a theme, you can use the built-in option
@option{--clon-theme} or its accompanying environment variable
@env{CLON_THEME}. Just provide it with the theme name, and the
corresponding theme file will be looked up in the search path
(@pxref{Search Path}), stopping at the first match.

@cindex File Extension, @t{cth}
@cindex @t{cth} extension
@cindex Themes, files, @t{cth} extension
You can omit the @samp{cth} extension: @clon{} looks for a file named
exactly as you said first and attempts to add the theme extension next.
Note that searching with or without extension has priority over the
search path. For instance, suppose that the following files exist:
@itemize @w{}
@item
@t{/usr/local/share/clon/themes/foobar}
@item
@t{/usr/share/clon/themes/foobar.cth}
@end itemize
Using @samp{--clon-theme=foobar} will match the first one while
@samp{--clon-theme=foobar.cth} will match the second.

Now suppose that the following files exist:
@itemize @w{}
@item
@t{/usr/local/share/clon/themes/foobar.cth}
@item
@t{/usr/share/clon/themes/foobar}
@end itemize
Using either @samp{--clon-theme=foobar} or
@samp{--clon-theme=foobar.cth} will always match the first file. Which
brings us to the next point (how clever).

It is possible to bypass the search path when looking for a theme: just
provide @option{--clon-theme} with a theme name starting with a path
component (@ie{} @samp{/}, @samp{./} or @samp{../}). Even in that case,
you can still omit the @samp{cth} extension.

@cindex Built-in themes, @t{raw}
@cindex Themes, built-in, @t{raw}
@cindex Standard Themes, files, @file{raw.cth}
@cindex Themes, files, standard, @file{raw.cth}
Finally, here is an important precision about @option{--clon-theme}.
This option has a fallback of @t{nil} and a default of @t{raw}. This
means that if you don't use the option at all, a theme named @t{raw}
will be looked up in the search path. This theme exists in the standard
distribution and you are free to modify it. On the other hand, since
this option has a fallback, it means that its argument is optional. If
you don't provide any argument (that is, if you just use
@samp{--clon-theme}), then the @emph{built-in} raw theme will be used.
This theme is originally identical to the one provided in the file
@file{raw.cth} but since it is built in every clonified application, you
cannot change it.


@c ---------------
@c Theme Creation
@c ---------------
@node Theme Creation, , Theme Mechanism, Output
@section Theme Creation
Perhaps the most exciting thing in Computer Science is to spend more
time hacking a tool than actually using it. After reading this section,
you will find yourselves spending days customizing theme files instead
of using clonified applications.

@menu
* Theme Elements::              Faces, properties, comments
* Faces::                       Boy, you look just like your mother
* Layout Properties::           Text geometry
* Highlight Properties::        ISO/IEC 6429 SGR
@end menu

@node Theme Elements, Faces, Theme Creation, Theme Creation
@subsection Theme Elements
@cindex Faces
@cindex Face Properties
@cindex Themes, faces
@cindex Themes, faces, properties
@cindex Comments
@cindex Themes, comments
Hear hear! If you understand what @command{M-x all-hail-[x]emacs} means,
you're going to get quite comfy here. @clon{} themes are articulated
around two basic concepts: @emph{faces} and (face) @emph{properties}. A
property describes some visual attribute for some piece of text, for
instance bold, red, indented by 2 columns to the right. A face is more or
less a set of properties (but there's more to it than that; please hold
your post). Every piece of text in @clon{}'s output is associated with
one or more faces, which in turn define specific values for specific
properties.

@cindex Layout Properties
@cindex Faces, properties, layout
@cindex Themes, faces, properties, layout
@cindex Highlight Properties
@cindex Faces, properties, highlight
@cindex Themes, faces, properties, highlight
There are two property types in @clon{}: @emph{layout properties}
describe the text geometry (line width, indentation @etc{}) and
@emph{highlight properties} describe the visual appearance of characters
(color, font @etc{}). Please see @ref{Layout Properties} and
@ref{Highlight Properties} for an exhaustive list of them.




@node Faces, Layout Properties, Theme Elements, Theme Creation
@subsection Faces
@cindex Faces
@cindex Themes, faces

@node Layout Properties, Highlight Properties, Faces, Theme Creation
@subsection Layout Properties
@cindex Layout Properties
@cindex Faces, properties, layout
@cindex Themes, faces, properties, layout

@node Highlight Properties, , Layout Properties, Theme Creation
@subsection Highlight Properties
@cindex Highlight Properties
@cindex Faces, properties, highlight
@cindex Themes, faces, properties, highlight



@c ====================================================================
@c Concept Index
@c ====================================================================
@node Concept Index,  , Output, Top
@unnumbered Concept Index

@printindex cp

@bye

@c clon-enduser.texi ends here

@c  LocalWords:  Clon clon cmdline Clonification tty emph CmdLine clonified
@c  LocalWords:  clonfiscated clonistified clonificated clonificationated samp
@c  LocalWords:  cindex subsubsection pxref
